<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PhoneNumberLabel" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="NameLabel" xml:space="preserve">
    <value>Full Name</value>
  </data>
  <data name="RegistrationInfoLabel" xml:space="preserve">
    <value>Please fill in the fields below. Remember, fields marked with &lt;font color=red&gt;*&lt;/font&gt; are necessary.</value>
  </data>
  <data name="Address1Label" xml:space="preserve">
    <value>Address 1</value>
  </data>
  <data name="Address2Label" xml:space="preserve">
    <value>Address 2</value>
  </data>
  <data name="Address3Label" xml:space="preserve">
    <value>Address 3</value>
  </data>
  <data name="Address4Label" xml:space="preserve">
    <value>Address 4</value>
  </data>
  <data name="Address5Label" xml:space="preserve">
    <value>Address 5</value>
  </data>
  <data name="CompanyNameLabel" xml:space="preserve">
    <value>Company Name</value>
  </data>
  <data name="CountryLabel" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="CustomerIdLabel" xml:space="preserve">
    <value>Customer ID</value>
  </data>
  <data name="VatNumberLabel" xml:space="preserve">
    <value>VAT Number</value>
  </data>
  <data name="VerificationLabel" xml:space="preserve">
    <value>Verification</value>
  </data>
  <data name="ContinueButtonText" xml:space="preserve">
    <value>Continue registration</value>
  </data>
  <data name="CustomerIdInfoLabel" xml:space="preserve">
    <value>You must enter a unique customer ID of your own choice. For example a company name, phone number, e-mail or other. The customer id will be used, every time you log into T.Rex</value>
  </data>
  <data name="TitleLabel" xml:space="preserve">
    <value>T.Rex Registration</value>
  </data>
  <data name="ApplicationNameRequiredValidator" xml:space="preserve">
    <value>Customer ID is required</value>
  </data>
  <data name="ApplicationNameExpressionValidator" xml:space="preserve">
    <value>Customer ID must be at least 5 characters long and should not include spaces</value>
  </data>
  <data name="ApplicationNameAvailableValidator" xml:space="preserve">
    <value>Customer ID is taken, please choose a different one</value>
  </data>
  <data name="Address1RequiredValidator" xml:space="preserve">
    <value>Address is required</value>
  </data>
  <data name="CompanyNameRequiredValidator" xml:space="preserve">
    <value>Company Name is required</value>
  </data>
  <data name="CountryRequiredValidator" xml:space="preserve">
    <value>Country must be selected</value>
  </data>
  <data name="FullNameRequiredValidator" xml:space="preserve">
    <value>Full Name is required</value>
  </data>
  <data name="PhoneNumberRequiredValidator" xml:space="preserve">
    <value>Phone Number is required</value>
  </data>
  <data name="VatNumberRequiredValidator" xml:space="preserve">
    <value>VAT Number field must not be empty</value>
  </data>
  <data name="ServiceErrorLabel" xml:space="preserve">
    <value>Sorry, registration service is not available at the moment, please try again later or contact administrator on admin@admin.admin</value>
  </data>
  <data name="PhoneNumberExpressionValidator" xml:space="preserve">
    <value>Phone number must be atleast 5 digits long and should not include any special characters</value>
  </data>
  <data name="ApplicationNameUnableToValidate" xml:space="preserve">
    <value>Unable to validate Customer ID due to service error</value>
  </data>
  <data name="VerificationInfoLabel" xml:space="preserve">
    <value>Please type in the digits you see in the image above</value>
  </data>
  <data name="CatchValidator" xml:space="preserve">
    <value>Input was wrong, please try again</value>
  </data>
  <data name="CatchRequiredValidator" xml:space="preserve">
    <value>Verification field must not be empty</value>
  </data>
  <data name="RefreshButton" xml:space="preserve">
    <value>Click here if image is not readable</value>
  </data>
  <data name="PleaseWait" xml:space="preserve">
    <value>Please wait</value>
  </data>
  <data name="ZipcodeLabel" xml:space="preserve">
    <value>Zip Code</value>
  </data>
  <data name="CityLabel" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="ZipcodeRequiredValidator" xml:space="preserve">
    <value>Zip code is required</value>
  </data>
  <data name="CityRequiredValidator" xml:space="preserve">
    <value>City is required</value>
  </data>
</root>