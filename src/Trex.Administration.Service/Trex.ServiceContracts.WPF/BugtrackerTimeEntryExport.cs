//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    public partial class BugtrackerTimeEntryExport: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int BugtrackerTimeEntryExportID
        {
            get { return _bugtrackerTimeEntryExportID; }
            set
            {
                if (_bugtrackerTimeEntryExportID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BugtrackerTimeEntryExportID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _bugtrackerTimeEntryExportID = value;
                    OnPropertyChanged("BugtrackerTimeEntryExportID");
                }
            }
        }
        private int _bugtrackerTimeEntryExportID;
    
        [DataMember]
        public int ProjectID
        {
            get { return _projectID; }
            set
            {
                if (_projectID != value)
                {
                    _projectID = value;
                    OnPropertyChanged("ProjectID");
                }
            }
        }
        private int _projectID;
    
        [DataMember]
        public int TaskID
        {
            get { return _taskID; }
            set
            {
                if (_taskID != value)
                {
                    _taskID = value;
                    OnPropertyChanged("TaskID");
                }
            }
        }
        private int _taskID;
    
        [DataMember]
        public int TimeEntryID
        {
            get { return _timeEntryID; }
            set
            {
                if (_timeEntryID != value)
                {
                    _timeEntryID = value;
                    OnPropertyChanged("TimeEntryID");
                }
            }
        }
        private int _timeEntryID;
    
        [DataMember]
        public decimal GeminiIssueID
        {
            get { return _geminiIssueID; }
            set
            {
                if (_geminiIssueID != value)
                {
                    _geminiIssueID = value;
                    OnPropertyChanged("GeminiIssueID");
                }
            }
        }
        private decimal _geminiIssueID;
    
        [DataMember]
        public decimal GeminiTimeLogID
        {
            get { return _geminiTimeLogID; }
            set
            {
                if (_geminiTimeLogID != value)
                {
                    _geminiTimeLogID = value;
                    OnPropertyChanged("GeminiTimeLogID");
                }
            }
        }
        private decimal _geminiTimeLogID;
    
        [DataMember]
        public System.DateTime ExportDate
        {
            get { return _exportDate; }
            set
            {
                if (_exportDate != value)
                {
                    _exportDate = value;
                    OnPropertyChanged("ExportDate");
                }
            }
        }
        private System.DateTime _exportDate;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
