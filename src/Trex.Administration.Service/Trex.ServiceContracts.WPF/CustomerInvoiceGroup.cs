//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(Invoice))]
    public partial class CustomerInvoiceGroup: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomerInvoiceGroupID
        {
            get { return _customerInvoiceGroupID; }
            set
            {
                if (_customerInvoiceGroupID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomerInvoiceGroupID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customerInvoiceGroupID = value;
                    OnPropertyChanged("CustomerInvoiceGroupID");
                }
            }
        }
        private int _customerInvoiceGroupID;
    
        [DataMember]
        public int CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerID", _customerID);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.CustomerID != value)
                        {
                            Customer = null;
                        }
                    }
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private int _customerID;
    
        [DataMember]
        public string Label
        {
            get { return _label; }
            set
            {
                if (_label != value)
                {
                    _label = value;
                    OnPropertyChanged("Label");
                }
            }
        }
        private string _label;
    
        [DataMember]
        public string Attention
        {
            get { return _attention; }
            set
            {
                if (_attention != value)
                {
                    _attention = value;
                    OnPropertyChanged("Attention");
                }
            }
        }
        private string _attention;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string Address1
        {
            get { return _address1; }
            set
            {
                if (_address1 != value)
                {
                    _address1 = value;
                    OnPropertyChanged("Address1");
                }
            }
        }
        private string _address1;
    
        [DataMember]
        public string Address2
        {
            get { return _address2; }
            set
            {
                if (_address2 != value)
                {
                    _address2 = value;
                    OnPropertyChanged("Address2");
                }
            }
        }
        private string _address2;
    
        [DataMember]
        public string ZipCode
        {
            get { return _zipCode; }
            set
            {
                if (_zipCode != value)
                {
                    _zipCode = value;
                    OnPropertyChanged("ZipCode");
                }
            }
        }
        private string _zipCode;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public Nullable<int> InvoiceTemplateIdPrint
        {
            get { return _invoiceTemplateIdPrint; }
            set
            {
                if (_invoiceTemplateIdPrint != value)
                {
                    _invoiceTemplateIdPrint = value;
                    OnPropertyChanged("InvoiceTemplateIdPrint");
                }
            }
        }
        private Nullable<int> _invoiceTemplateIdPrint;
    
        [DataMember]
        public Nullable<int> InvoiceTemplateIdMail
        {
            get { return _invoiceTemplateIdMail; }
            set
            {
                if (_invoiceTemplateIdMail != value)
                {
                    _invoiceTemplateIdMail = value;
                    OnPropertyChanged("InvoiceTemplateIdMail");
                }
            }
        }
        private Nullable<int> _invoiceTemplateIdMail;
    
        [DataMember]
        public Nullable<int> SpecificationTemplateIdMail
        {
            get { return _specificationTemplateIdMail; }
            set
            {
                if (_specificationTemplateIdMail != value)
                {
                    _specificationTemplateIdMail = value;
                    OnPropertyChanged("SpecificationTemplateIdMail");
                }
            }
        }
        private Nullable<int> _specificationTemplateIdMail;
    
        [DataMember]
        public bool DefaultCig
        {
            get { return _defaultCig; }
            set
            {
                if (_defaultCig != value)
                {
                    _defaultCig = value;
                    OnPropertyChanged("DefaultCig");
                }
            }
        }
        private bool _defaultCig;
    
        [DataMember]
        public int SendFormat
        {
            get { return _sendFormat; }
            set
            {
                if (_sendFormat != value)
                {
                    _sendFormat = value;
                    OnPropertyChanged("SendFormat");
                }
            }
        }
        private int _sendFormat;
    
        [DataMember]
        public Nullable<int> CreditNoteTemplateIdMail
        {
            get { return _creditNoteTemplateIdMail; }
            set
            {
                if (_creditNoteTemplateIdMail != value)
                {
                    _creditNoteTemplateIdMail = value;
                    OnPropertyChanged("CreditNoteTemplateIdMail");
                }
            }
        }
        private Nullable<int> _creditNoteTemplateIdMail;
    
        [DataMember]
        public Nullable<int> CreditNoteTemplateIdPrint
        {
            get { return _creditNoteTemplateIdPrint; }
            set
            {
                if (_creditNoteTemplateIdPrint != value)
                {
                    _creditNoteTemplateIdPrint = value;
                    OnPropertyChanged("CreditNoteTemplateIdPrint");
                }
            }
        }
        private Nullable<int> _creditNoteTemplateIdPrint;
    
        [DataMember]
        public string EmailCC
        {
            get { return _emailCC; }
            set
            {
                if (_emailCC != value)
                {
                    _emailCC = value;
                    OnPropertyChanged("EmailCC");
                }
            }
        }
        private string _emailCC;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnNavigationPropertyChanged("Customer");
                }
            }
        }
        private Customer _customer;
    
        [DataMember]
        public TrackableCollection<Project> Projects
        {
            get
            {
                if (_projects == null)
                {
                    _projects = new TrackableCollection<Project>();
                    _projects.CollectionChanged += FixupProjects;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projects != null)
                    {
                        _projects.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    if (_projects != null)
                    {
                        _projects.CollectionChanged += FixupProjects;
                    }
                    OnNavigationPropertyChanged("Projects");
                }
            }
        }
        private TrackableCollection<Project> _projects;
    
        [DataMember]
        public TrackableCollection<Invoice> Invoices
        {
            get
            {
                if (_invoices == null)
                {
                    _invoices = new TrackableCollection<Invoice>();
                    _invoices.CollectionChanged += FixupInvoices;
                }
                return _invoices;
            }
            set
            {
                if (!ReferenceEquals(_invoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoices != null)
                    {
                        _invoices.CollectionChanged -= FixupInvoices;
                    }
                    _invoices = value;
                    if (_invoices != null)
                    {
                        _invoices.CollectionChanged += FixupInvoices;
                    }
                    OnNavigationPropertyChanged("Invoices");
                }
            }
        }
        private TrackableCollection<Invoice> _invoices;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Customer = null;
            Projects.Clear();
            Invoices.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCustomer(Customer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomerInvoiceGroups.Contains(this))
            {
                previousValue.CustomerInvoiceGroups.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.CustomerInvoiceGroups.Contains(this))
                {
                    Customer.CustomerInvoiceGroups.Add(this);
                }
    
                CustomerID = Customer.CustomerID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                {
                    ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    item.CustomerInvoiceGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Projects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomerInvoiceGroup, this))
                    {
                        item.CustomerInvoiceGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Projects", item);
                    }
                }
            }
        }
    
        private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    item.CustomerInvoiceGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Invoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomerInvoiceGroup, this))
                    {
                        item.CustomerInvoiceGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Invoices", item);
                    }
                }
            }
        }

        #endregion

    }
}
