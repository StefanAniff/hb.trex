//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CustomerInvoiceGroup))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TimeEntryType))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(Tag))]
    [KnownType(typeof(UsersCustomer))]
    public partial class Customer: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomerID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private int _customerID;
    
        [DataMember]
        public System.Guid Guid
        {
            get { return _guid; }
            set
            {
                if (_guid != value)
                {
                    _guid = value;
                    OnPropertyChanged("Guid");
                }
            }
        }
        private System.Guid _guid;
    
        [DataMember]
        public System.DateTime CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private System.DateTime _createDate;
    
        [DataMember]
        public int CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedBy", _createdBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserID != value)
                        {
                            User = null;
                        }
                    }
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private int _createdBy;
    
        [DataMember]
        public string CustomerName
        {
            get { return _customerName; }
            set
            {
                if (_customerName != value)
                {
                    _customerName = value;
                    OnPropertyChanged("CustomerName");
                }
            }
        }
        private string _customerName;
    
        [DataMember]
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set
            {
                if (_phoneNumber != value)
                {
                    _phoneNumber = value;
                    OnPropertyChanged("PhoneNumber");
                }
            }
        }
        private string _phoneNumber;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public bool Inactive
        {
            get { return _inactive; }
            set
            {
                if (_inactive != value)
                {
                    _inactive = value;
                    OnPropertyChanged("Inactive");
                }
            }
        }
        private bool _inactive;
    
        [DataMember]
        public string StreetAddress
        {
            get { return _streetAddress; }
            set
            {
                if (_streetAddress != value)
                {
                    _streetAddress = value;
                    OnPropertyChanged("StreetAddress");
                }
            }
        }
        private string _streetAddress;
    
        [DataMember]
        public string ZipCode
        {
            get { return _zipCode; }
            set
            {
                if (_zipCode != value)
                {
                    _zipCode = value;
                    OnPropertyChanged("ZipCode");
                }
            }
        }
        private string _zipCode;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string ContactName
        {
            get { return _contactName; }
            set
            {
                if (_contactName != value)
                {
                    _contactName = value;
                    OnPropertyChanged("ContactName");
                }
            }
        }
        private string _contactName;
    
        [DataMember]
        public string ContactPhone
        {
            get { return _contactPhone; }
            set
            {
                if (_contactPhone != value)
                {
                    _contactPhone = value;
                    OnPropertyChanged("ContactPhone");
                }
            }
        }
        private string _contactPhone;
    
        [DataMember]
        public bool InheritsTimeEntryTypes
        {
            get { return _inheritsTimeEntryTypes; }
            set
            {
                if (_inheritsTimeEntryTypes != value)
                {
                    _inheritsTimeEntryTypes = value;
                    OnPropertyChanged("InheritsTimeEntryTypes");
                }
            }
        }
        private bool _inheritsTimeEntryTypes;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private Nullable<System.DateTime> _changeDate;
    
        [DataMember]
        public Nullable<int> ChangedBy
        {
            get { return _changedBy; }
            set
            {
                if (_changedBy != value)
                {
                    _changedBy = value;
                    OnPropertyChanged("ChangedBy");
                }
            }
        }
        private Nullable<int> _changedBy;
    
        [DataMember]
        public int PaymentTermsNumberOfDays
        {
            get { return _paymentTermsNumberOfDays; }
            set
            {
                if (_paymentTermsNumberOfDays != value)
                {
                    _paymentTermsNumberOfDays = value;
                    OnPropertyChanged("PaymentTermsNumberOfDays");
                }
            }
        }
        private int _paymentTermsNumberOfDays;
    
        [DataMember]
        public bool PaymentTermsIncludeCurrentMonth
        {
            get { return _paymentTermsIncludeCurrentMonth; }
            set
            {
                if (_paymentTermsIncludeCurrentMonth != value)
                {
                    _paymentTermsIncludeCurrentMonth = value;
                    OnPropertyChanged("PaymentTermsIncludeCurrentMonth");
                }
            }
        }
        private bool _paymentTermsIncludeCurrentMonth;
    
        [DataMember]
        public string Address2
        {
            get { return _address2; }
            set
            {
                if (_address2 != value)
                {
                    _address2 = value;
                    OnPropertyChanged("Address2");
                }
            }
        }
        private string _address2;
    
        [DataMember]
        public int SendFormat
        {
            get { return _sendFormat; }
            set
            {
                if (_sendFormat != value)
                {
                    _sendFormat = value;
                    OnPropertyChanged("SendFormat");
                }
            }
        }
        private int _sendFormat;
    
        [DataMember]
        public string EmailCC
        {
            get { return _emailCC; }
            set
            {
                if (_emailCC != value)
                {
                    _emailCC = value;
                    OnPropertyChanged("EmailCC");
                }
            }
        }
        private string _emailCC;
    
        [DataMember]
        public Nullable<bool> Internal
        {
            get { return _internal; }
            set
            {
                if (_internal != value)
                {
                    _internal = value;
                    OnPropertyChanged("Internal");
                }
            }
        }
        private Nullable<bool> _internal;
    
        [DataMember]
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (Users != null && Users.UserID != value)
                        {
                            Users = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private Nullable<int> _userId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CustomerInvoiceGroup> CustomerInvoiceGroups
        {
            get
            {
                if (_customerInvoiceGroups == null)
                {
                    _customerInvoiceGroups = new TrackableCollection<CustomerInvoiceGroup>();
                    _customerInvoiceGroups.CollectionChanged += FixupCustomerInvoiceGroups;
                }
                return _customerInvoiceGroups;
            }
            set
            {
                if (!ReferenceEquals(_customerInvoiceGroups, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customerInvoiceGroups != null)
                    {
                        _customerInvoiceGroups.CollectionChanged -= FixupCustomerInvoiceGroups;
                    }
                    _customerInvoiceGroups = value;
                    if (_customerInvoiceGroups != null)
                    {
                        _customerInvoiceGroups.CollectionChanged += FixupCustomerInvoiceGroups;
                    }
                    OnNavigationPropertyChanged("CustomerInvoiceGroups");
                }
            }
        }
        private TrackableCollection<CustomerInvoiceGroup> _customerInvoiceGroups;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TrackableCollection<TimeEntryType> TimeEntryTypes
        {
            get
            {
                if (_timeEntryTypes == null)
                {
                    _timeEntryTypes = new TrackableCollection<TimeEntryType>();
                    _timeEntryTypes.CollectionChanged += FixupTimeEntryTypes;
                }
                return _timeEntryTypes;
            }
            set
            {
                if (!ReferenceEquals(_timeEntryTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timeEntryTypes != null)
                    {
                        _timeEntryTypes.CollectionChanged -= FixupTimeEntryTypes;
                    }
                    _timeEntryTypes = value;
                    if (_timeEntryTypes != null)
                    {
                        _timeEntryTypes.CollectionChanged += FixupTimeEntryTypes;
                    }
                    OnNavigationPropertyChanged("TimeEntryTypes");
                }
            }
        }
        private TrackableCollection<TimeEntryType> _timeEntryTypes;
    
        [DataMember]
        public TrackableCollection<Project> Projects
        {
            get
            {
                if (_projects == null)
                {
                    _projects = new TrackableCollection<Project>();
                    _projects.CollectionChanged += FixupProjects;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projects != null)
                    {
                        _projects.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    if (_projects != null)
                    {
                        _projects.CollectionChanged += FixupProjects;
                    }
                    OnNavigationPropertyChanged("Projects");
                }
            }
        }
        private TrackableCollection<Project> _projects;
    
        [DataMember]
        public TrackableCollection<Tag> Tags
        {
            get
            {
                if (_tags == null)
                {
                    _tags = new TrackableCollection<Tag>();
                    _tags.CollectionChanged += FixupTags;
                }
                return _tags;
            }
            set
            {
                if (!ReferenceEquals(_tags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tags != null)
                    {
                        _tags.CollectionChanged -= FixupTags;
                    }
                    _tags = value;
                    if (_tags != null)
                    {
                        _tags.CollectionChanged += FixupTags;
                    }
                    OnNavigationPropertyChanged("Tags");
                }
            }
        }
        private TrackableCollection<Tag> _tags;
    
        [DataMember]
        public TrackableCollection<UsersCustomer> UsersCustomers
        {
            get
            {
                if (_usersCustomers == null)
                {
                    _usersCustomers = new TrackableCollection<UsersCustomer>();
                    _usersCustomers.CollectionChanged += FixupUsersCustomers;
                }
                return _usersCustomers;
            }
            set
            {
                if (!ReferenceEquals(_usersCustomers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_usersCustomers != null)
                    {
                        _usersCustomers.CollectionChanged -= FixupUsersCustomers;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UsersCustomer item in _usersCustomers)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _usersCustomers = value;
                    if (_usersCustomers != null)
                    {
                        _usersCustomers.CollectionChanged += FixupUsersCustomers;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UsersCustomer item in _usersCustomers)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UsersCustomers");
                }
            }
        }
        private TrackableCollection<UsersCustomer> _usersCustomers;
    
        [DataMember]
        public User Users
        {
            get { return _users; }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users;
                    _users = value;
                    FixupUsers(previousValue);
                    OnNavigationPropertyChanged("Users");
                }
            }
        }
        private User _users;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CustomerInvoiceGroups.Clear();
            User = null;
            TimeEntryTypes.Clear();
            Projects.Clear();
            Tags.Clear();
            UsersCustomers.Clear();
            Users = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Customers.Contains(this))
                {
                    User.Customers.Add(this);
                }
    
                CreatedBy = User.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupUsers(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Customers_1.Contains(this))
            {
                previousValue.Customers_1.Remove(this);
            }
    
            if (Users != null)
            {
                if (!Users.Customers_1.Contains(this))
                {
                    Users.Customers_1.Add(this);
                }
    
                UserId = Users.UserID;
            }
            else if (!skipKeys)
            {
                UserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Users")
                    && (ChangeTracker.OriginalValues["Users"] == Users))
                {
                    ChangeTracker.OriginalValues.Remove("Users");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Users", previousValue);
                }
                if (Users != null && !Users.ChangeTracker.ChangeTrackingEnabled)
                {
                    Users.StartTracking();
                }
            }
        }
    
        private void FixupCustomerInvoiceGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomerInvoiceGroup item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomerInvoiceGroups", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerInvoiceGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomerInvoiceGroups", item);
                    }
                }
            }
        }
    
        private void FixupTimeEntryTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimeEntryType item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimeEntryTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimeEntryType item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimeEntryTypes", item);
                    }
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Projects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Projects", item);
                    }
                }
            }
        }
    
        private void FixupTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Tag item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tags", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tag item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tags", item);
                    }
                }
            }
        }
    
        private void FixupUsersCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UsersCustomer item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UsersCustomers", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UsersCustomer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UsersCustomers", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
