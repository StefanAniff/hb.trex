
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace Trex.ServiceContracts
{


public partial class spFindTimeEntiresForInvoice_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
{
    #region Primitive Properties
    

    [DataMember]
    public Nullable<double> TimeSpent
    {
        get { return _timeSpent; }
        set
        {
            if (_timeSpent != value)
            {
                OnComplexPropertyChanging();
                _timeSpent = value;
                OnPropertyChanged("TimeSpent");
            }
        }
    }
    private Nullable<double> _timeSpent;


    [DataMember]
    public Nullable<System.DateTime> StartDate
    {
        get { return _startDate; }
        set
        {
            if (_startDate != value)
            {
                OnComplexPropertyChanging();
                _startDate = value;
                OnPropertyChanged("StartDate");
            }
        }
    }
    private Nullable<System.DateTime> _startDate;


    [DataMember]
    public Nullable<System.DateTime> EndDate
    {
        get { return _endDate; }
        set
        {
            if (_endDate != value)
            {
                OnComplexPropertyChanging();
                _endDate = value;
                OnPropertyChanged("EndDate");
            }
        }
    }
    private Nullable<System.DateTime> _endDate;


    [DataMember]
    public string Project
    {
        get { return _project; }
        set
        {
            if (_project != value)
            {
                OnComplexPropertyChanging();
                _project = value;
                OnPropertyChanged("Project");
            }
        }
    }
    private string _project;


    [DataMember]
    public int Project_ID
    {
        get { return _project_ID; }
        set
        {
            if (_project_ID != value)
            {
                OnComplexPropertyChanging();
                _project_ID = value;
                OnPropertyChanged("Project_ID");
            }
        }
    }
    private int _project_ID;


    [DataMember]
    public string Task
    {
        get { return _task; }
        set
        {
            if (_task != value)
            {
                OnComplexPropertyChanging();
                _task = value;
                OnPropertyChanged("Task");
            }
        }
    }
    private string _task;


    [DataMember]
    public int Task_ID
    {
        get { return _task_ID; }
        set
        {
            if (_task_ID != value)
            {
                OnComplexPropertyChanging();
                _task_ID = value;
                OnPropertyChanged("Task_ID");
            }
        }
    }
    private int _task_ID;


    [DataMember]
    public double Price_pr_Hour
    {
        get { return _price_pr_Hour; }
        set
        {
            if (_price_pr_Hour != value)
            {
                OnComplexPropertyChanging();
                _price_pr_Hour = value;
                OnPropertyChanged("Price_pr_Hour");
            }
        }
    }
    private double _price_pr_Hour;


    [DataMember]
    public Nullable<int> InvoiceID
    {
        get { return _invoiceID; }
        set
        {
            if (_invoiceID != value)
            {
                OnComplexPropertyChanging();
                _invoiceID = value;
                OnPropertyChanged("InvoiceID");
            }
        }
    }
    private Nullable<int> _invoiceID;


    [DataMember]
    public int CIG_ID
    {
        get { return _cIG_ID; }
        set
        {
            if (_cIG_ID != value)
            {
                OnComplexPropertyChanging();
                _cIG_ID = value;
                OnPropertyChanged("CIG_ID");
            }
        }
    }
    private int _cIG_ID;


    [DataMember]
    public int Customer_ID
    {
        get { return _customer_ID; }
        set
        {
            if (_customer_ID != value)
            {
                OnComplexPropertyChanging();
                _customer_ID = value;
                OnPropertyChanged("Customer_ID");
            }
        }
    }
    private int _customer_ID;


    [DataMember]
    public string GroupName
    {
        get { return _groupName; }
        set
        {
            if (_groupName != value)
            {
                OnComplexPropertyChanging();
                _groupName = value;
                OnPropertyChanged("GroupName");
            }
        }
    }
    private string _groupName;


    [DataMember]
    public int TimeEntry_ID
    {
        get { return _timeEntry_ID; }
        set
        {
            if (_timeEntry_ID != value)
            {
                OnComplexPropertyChanging();
                _timeEntry_ID = value;
                OnPropertyChanged("TimeEntry_ID");
            }
        }
    }
    private int _timeEntry_ID;

        #endregion
        #region ChangeTracking
    

    private void OnComplexPropertyChanging()
    {
        if (_complexPropertyChanging != null)
        {
            _complexPropertyChanging(this, new EventArgs());
        }
    }

    event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
    private event EventHandler _complexPropertyChanging;

    private void OnPropertyChanged(String propertyName)
    {
        if (_propertyChanged != null)
        {
            _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    private event PropertyChangedEventHandler _propertyChanged;


    public static void RecordComplexOriginalValues(String parentPropertyName, spFindTimeEntiresForInvoice_Result complexObject, ObjectChangeTracker changeTracker)
    {
        if (String.IsNullOrEmpty(parentPropertyName))
        {
            throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
        }

        if (changeTracker == null)
        {
            throw new ArgumentNullException("changeTracker");
        }

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TimeSpent", parentPropertyName), complexObject == null ? null : (object)complexObject.TimeSpent);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.StartDate", parentPropertyName), complexObject == null ? null : (object)complexObject.StartDate);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.EndDate", parentPropertyName), complexObject == null ? null : (object)complexObject.EndDate);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Project", parentPropertyName), complexObject == null ? null : (object)complexObject.Project);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Project_ID", parentPropertyName), complexObject == null ? null : (object)complexObject.Project_ID);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Task", parentPropertyName), complexObject == null ? null : (object)complexObject.Task);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Task_ID", parentPropertyName), complexObject == null ? null : (object)complexObject.Task_ID);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Price_pr_Hour", parentPropertyName), complexObject == null ? null : (object)complexObject.Price_pr_Hour);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InvoiceID", parentPropertyName), complexObject == null ? null : (object)complexObject.InvoiceID);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CIG_ID", parentPropertyName), complexObject == null ? null : (object)complexObject.CIG_ID);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Customer_ID", parentPropertyName), complexObject == null ? null : (object)complexObject.Customer_ID);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.GroupName", parentPropertyName), complexObject == null ? null : (object)complexObject.GroupName);

        changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TimeEntry_ID", parentPropertyName), complexObject == null ? null : (object)complexObject.TimeEntry_ID);

    }

        #endregion
    
}

}
