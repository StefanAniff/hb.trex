//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(InvoiceTemplateFiles))]
    public partial class InvoiceTemplate: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TemplateId
        {
            get { return _templateId; }
            set
            {
                if (_templateId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TemplateId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _templateId = value;
                    OnPropertyChanged("TemplateId");
                }
            }
        }
        private int _templateId;
    
        [DataMember]
        public string TemplateName
        {
            get { return _templateName; }
            set
            {
                if (_templateName != value)
                {
                    _templateName = value;
                    OnPropertyChanged("TemplateName");
                }
            }
        }
        private string _templateName;
    
        [DataMember]
        public System.DateTime CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private System.DateTime _createDate;
    
        [DataMember]
        public string CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private string _createdBy;
    
        [DataMember]
        public System.Guid Guid
        {
            get { return _guid; }
            set
            {
                if (_guid != value)
                {
                    _guid = value;
                    OnPropertyChanged("Guid");
                }
            }
        }
        private System.Guid _guid;
    
        [DataMember]
        public bool StandardInvoicePrint
        {
            get { return _standardInvoicePrint; }
            set
            {
                if (_standardInvoicePrint != value)
                {
                    _standardInvoicePrint = value;
                    OnPropertyChanged("StandardInvoicePrint");
                }
            }
        }
        private bool _standardInvoicePrint;
    
        [DataMember]
        public bool StandardInvoiceMail
        {
            get { return _standardInvoiceMail; }
            set
            {
                if (_standardInvoiceMail != value)
                {
                    _standardInvoiceMail = value;
                    OnPropertyChanged("StandardInvoiceMail");
                }
            }
        }
        private bool _standardInvoiceMail;
    
        [DataMember]
        public bool StandardSpecification
        {
            get { return _standardSpecification; }
            set
            {
                if (_standardSpecification != value)
                {
                    _standardSpecification = value;
                    OnPropertyChanged("StandardSpecification");
                }
            }
        }
        private bool _standardSpecification;
    
        [DataMember]
        public bool StandardCreditNotePrint
        {
            get { return _standardCreditNotePrint; }
            set
            {
                if (_standardCreditNotePrint != value)
                {
                    _standardCreditNotePrint = value;
                    OnPropertyChanged("StandardCreditNotePrint");
                }
            }
        }
        private bool _standardCreditNotePrint;
    
        [DataMember]
        public bool StandardCreditNoteMail
        {
            get { return _standardCreditNoteMail; }
            set
            {
                if (_standardCreditNoteMail != value)
                {
                    _standardCreditNoteMail = value;
                    OnPropertyChanged("StandardCreditNoteMail");
                }
            }
        }
        private bool _standardCreditNoteMail;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<InvoiceTemplateFiles> InvoiceTemplateFiles
        {
            get
            {
                if (_invoiceTemplateFiles == null)
                {
                    _invoiceTemplateFiles = new TrackableCollection<InvoiceTemplateFiles>();
                    _invoiceTemplateFiles.CollectionChanged += FixupInvoiceTemplateFiles;
                }
                return _invoiceTemplateFiles;
            }
            set
            {
                if (!ReferenceEquals(_invoiceTemplateFiles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoiceTemplateFiles != null)
                    {
                        _invoiceTemplateFiles.CollectionChanged -= FixupInvoiceTemplateFiles;
                    }
                    _invoiceTemplateFiles = value;
                    if (_invoiceTemplateFiles != null)
                    {
                        _invoiceTemplateFiles.CollectionChanged += FixupInvoiceTemplateFiles;
                    }
                    OnNavigationPropertyChanged("InvoiceTemplateFiles");
                }
            }
        }
        private TrackableCollection<InvoiceTemplateFiles> _invoiceTemplateFiles;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            InvoiceTemplateFiles.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupInvoiceTemplateFiles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (InvoiceTemplateFiles item in e.NewItems)
                {
                    item.InvoiceTemplates = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("InvoiceTemplateFiles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceTemplateFiles item in e.OldItems)
                {
                    if (ReferenceEquals(item.InvoiceTemplates, this))
                    {
                        item.InvoiceTemplates = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InvoiceTemplateFiles", item);
                    }
                }
            }
        }

        #endregion

    }
}
