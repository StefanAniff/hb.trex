//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(Invoice))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(Task))]
    [KnownType(typeof(TimeEntry))]
    [KnownType(typeof(UsersCustomer))]
    [KnownType(typeof(InvoiceComment))]
    public partial class User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public double Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private double _price;
    
        [DataMember]
        public bool Inactive
        {
            get { return _inactive; }
            set
            {
                if (_inactive != value)
                {
                    _inactive = value;
                    OnPropertyChanged("Inactive");
                }
            }
        }
        private bool _inactive;
    
        [DataMember]
        public string Department
        {
            get { return _department; }
            set
            {
                if (_department != value)
                {
                    _department = value;
                    OnPropertyChanged("Department");
                }
            }
        }
        private string _department;
    
        [DataMember]
        public string Location
        {
            get { return _location; }
            set
            {
                if (_location != value)
                {
                    _location = value;
                    OnPropertyChanged("Location");
                }
            }
        }
        private string _location;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    _customers = new TrackableCollection<Customer>();
                    _customers.CollectionChanged += FixupCustomers;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customers != null)
                    {
                        _customers.CollectionChanged -= FixupCustomers;
                    }
                    _customers = value;
                    if (_customers != null)
                    {
                        _customers.CollectionChanged += FixupCustomers;
                    }
                    OnNavigationPropertyChanged("Customers");
                }
            }
        }
        private TrackableCollection<Customer> _customers;
    
        [DataMember]
        public TrackableCollection<Invoice> Invoices
        {
            get
            {
                if (_invoices == null)
                {
                    _invoices = new TrackableCollection<Invoice>();
                    _invoices.CollectionChanged += FixupInvoices;
                }
                return _invoices;
            }
            set
            {
                if (!ReferenceEquals(_invoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoices != null)
                    {
                        _invoices.CollectionChanged -= FixupInvoices;
                    }
                    _invoices = value;
                    if (_invoices != null)
                    {
                        _invoices.CollectionChanged += FixupInvoices;
                    }
                    OnNavigationPropertyChanged("Invoices");
                }
            }
        }
        private TrackableCollection<Invoice> _invoices;
    
        [DataMember]
        public TrackableCollection<Project> Projects
        {
            get
            {
                if (_projects == null)
                {
                    _projects = new TrackableCollection<Project>();
                    _projects.CollectionChanged += FixupProjects;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projects != null)
                    {
                        _projects.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    if (_projects != null)
                    {
                        _projects.CollectionChanged += FixupProjects;
                    }
                    OnNavigationPropertyChanged("Projects");
                }
            }
        }
        private TrackableCollection<Project> _projects;
    
        [DataMember]
        public TrackableCollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    _tasks = new TrackableCollection<Task>();
                    _tasks.CollectionChanged += FixupTasks;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged += FixupTasks;
                    }
                    OnNavigationPropertyChanged("Tasks");
                }
            }
        }
        private TrackableCollection<Task> _tasks;
    
        [DataMember]
        public TrackableCollection<TimeEntry> TimeEntries
        {
            get
            {
                if (_timeEntries == null)
                {
                    _timeEntries = new TrackableCollection<TimeEntry>();
                    _timeEntries.CollectionChanged += FixupTimeEntries;
                }
                return _timeEntries;
            }
            set
            {
                if (!ReferenceEquals(_timeEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timeEntries != null)
                    {
                        _timeEntries.CollectionChanged -= FixupTimeEntries;
                    }
                    _timeEntries = value;
                    if (_timeEntries != null)
                    {
                        _timeEntries.CollectionChanged += FixupTimeEntries;
                    }
                    OnNavigationPropertyChanged("TimeEntries");
                }
            }
        }
        private TrackableCollection<TimeEntry> _timeEntries;
    
        [DataMember]
        public TrackableCollection<TimeEntry> TimeEntries1
        {
            get
            {
                if (_timeEntries1 == null)
                {
                    _timeEntries1 = new TrackableCollection<TimeEntry>();
                    _timeEntries1.CollectionChanged += FixupTimeEntries1;
                }
                return _timeEntries1;
            }
            set
            {
                if (!ReferenceEquals(_timeEntries1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timeEntries1 != null)
                    {
                        _timeEntries1.CollectionChanged -= FixupTimeEntries1;
                    }
                    _timeEntries1 = value;
                    if (_timeEntries1 != null)
                    {
                        _timeEntries1.CollectionChanged += FixupTimeEntries1;
                    }
                    OnNavigationPropertyChanged("TimeEntries1");
                }
            }
        }
        private TrackableCollection<TimeEntry> _timeEntries1;
    
        [DataMember]
        public TrackableCollection<UsersCustomer> UsersCustomers
        {
            get
            {
                if (_usersCustomers == null)
                {
                    _usersCustomers = new TrackableCollection<UsersCustomer>();
                    _usersCustomers.CollectionChanged += FixupUsersCustomers;
                }
                return _usersCustomers;
            }
            set
            {
                if (!ReferenceEquals(_usersCustomers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_usersCustomers != null)
                    {
                        _usersCustomers.CollectionChanged -= FixupUsersCustomers;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UsersCustomer item in _usersCustomers)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _usersCustomers = value;
                    if (_usersCustomers != null)
                    {
                        _usersCustomers.CollectionChanged += FixupUsersCustomers;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UsersCustomer item in _usersCustomers)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UsersCustomers");
                }
            }
        }
        private TrackableCollection<UsersCustomer> _usersCustomers;
    
        [DataMember]
        public TrackableCollection<Project> Projects1
        {
            get
            {
                if (_projects1 == null)
                {
                    _projects1 = new TrackableCollection<Project>();
                    _projects1.CollectionChanged += FixupProjects1;
                }
                return _projects1;
            }
            set
            {
                if (!ReferenceEquals(_projects1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projects1 != null)
                    {
                        _projects1.CollectionChanged -= FixupProjects1;
                    }
                    _projects1 = value;
                    if (_projects1 != null)
                    {
                        _projects1.CollectionChanged += FixupProjects1;
                    }
                    OnNavigationPropertyChanged("Projects1");
                }
            }
        }
        private TrackableCollection<Project> _projects1;
    
        [DataMember]
        public TrackableCollection<Customer> Customers_1
        {
            get
            {
                if (_customers_1 == null)
                {
                    _customers_1 = new TrackableCollection<Customer>();
                    _customers_1.CollectionChanged += FixupCustomers_1;
                }
                return _customers_1;
            }
            set
            {
                if (!ReferenceEquals(_customers_1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customers_1 != null)
                    {
                        _customers_1.CollectionChanged -= FixupCustomers_1;
                    }
                    _customers_1 = value;
                    if (_customers_1 != null)
                    {
                        _customers_1.CollectionChanged += FixupCustomers_1;
                    }
                    OnNavigationPropertyChanged("Customers_1");
                }
            }
        }
        private TrackableCollection<Customer> _customers_1;
    
        [DataMember]
        public TrackableCollection<InvoiceComment> InvoiceComments
        {
            get
            {
                if (_invoiceComments == null)
                {
                    _invoiceComments = new TrackableCollection<InvoiceComment>();
                    _invoiceComments.CollectionChanged += FixupInvoiceComments;
                }
                return _invoiceComments;
            }
            set
            {
                if (!ReferenceEquals(_invoiceComments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoiceComments != null)
                    {
                        _invoiceComments.CollectionChanged -= FixupInvoiceComments;
                    }
                    _invoiceComments = value;
                    if (_invoiceComments != null)
                    {
                        _invoiceComments.CollectionChanged += FixupInvoiceComments;
                    }
                    OnNavigationPropertyChanged("InvoiceComments");
                }
            }
        }
        private TrackableCollection<InvoiceComment> _invoiceComments;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Customers.Clear();
            Invoices.Clear();
            Projects.Clear();
            Tasks.Clear();
            TimeEntries.Clear();
            TimeEntries1.Clear();
            UsersCustomers.Clear();
            Projects1.Clear();
            Customers_1.Clear();
            InvoiceComments.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Customers", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Customers", item);
                    }
                }
            }
        }
    
        private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Invoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Invoices", item);
                    }
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Projects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Projects", item);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks", item);
                    }
                }
            }
        }
    
        private void FixupTimeEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimeEntry item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimeEntries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimeEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimeEntries", item);
                    }
                }
            }
        }
    
        private void FixupTimeEntries1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimeEntry item in e.NewItems)
                {
                    item.User1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimeEntries1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimeEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.User1, this))
                    {
                        item.User1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimeEntries1", item);
                    }
                }
            }
        }
    
        private void FixupUsersCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UsersCustomer item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UsersCustomers", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UsersCustomer item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UsersCustomers", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupProjects1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Projects1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Projects1", item);
                    }
                }
            }
        }
    
        private void FixupCustomers_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.Users = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Customers_1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Users, this))
                    {
                        item.Users = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Customers_1", item);
                    }
                }
            }
        }
    
        private void FixupInvoiceComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (InvoiceComment item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("InvoiceComments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceComment item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InvoiceComments", item);
                    }
                }
            }
        }

        #endregion

    }
}
