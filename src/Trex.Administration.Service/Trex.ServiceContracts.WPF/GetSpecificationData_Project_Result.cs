//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    
    public partial class GetSpecificationData_Project_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> ProjectID
        {
            get { return _projectID; }
            set
            {
                if (_projectID != value)
                {
                    OnComplexPropertyChanging();
                    _projectID = value;
                    OnPropertyChanged("ProjectID");
                }
            }
        }
        private Nullable<int> _projectID;
    
        [DataMember]
        public string ProjectName
        {
            get { return _projectName; }
            set
            {
                if (_projectName != value)
                {
                    OnComplexPropertyChanging();
                    _projectName = value;
                    OnPropertyChanged("ProjectName");
                }
            }
        }
        private string _projectName;
    
        [DataMember]
        public Nullable<double> TimeUsed
        {
            get { return _timeUsed; }
            set
            {
                if (_timeUsed != value)
                {
                    OnComplexPropertyChanging();
                    _timeUsed = value;
                    OnPropertyChanged("TimeUsed");
                }
            }
        }
        private Nullable<double> _timeUsed;
    
        [DataMember]
        public Nullable<bool> FixedPriceProject
        {
            get { return _fixedPriceProject; }
            set
            {
                if (_fixedPriceProject != value)
                {
                    OnComplexPropertyChanging();
                    _fixedPriceProject = value;
                    OnPropertyChanged("FixedPriceProject");
                }
            }
        }
        private Nullable<bool> _fixedPriceProject;
    
        [DataMember]
        public Nullable<double> FixedPrice
        {
            get { return _fixedPrice; }
            set
            {
                if (_fixedPrice != value)
                {
                    OnComplexPropertyChanging();
                    _fixedPrice = value;
                    OnPropertyChanged("FixedPrice");
                }
            }
        }
        private Nullable<double> _fixedPrice;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, GetSpecificationData_Project_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProjectID", parentPropertyName), complexObject == null ? null : (object)complexObject.ProjectID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProjectName", parentPropertyName), complexObject == null ? null : (object)complexObject.ProjectName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TimeUsed", parentPropertyName), complexObject == null ? null : (object)complexObject.TimeUsed);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FixedPriceProject", parentPropertyName), complexObject == null ? null : (object)complexObject.FixedPriceProject);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FixedPrice", parentPropertyName), complexObject == null ? null : (object)complexObject.FixedPrice);
        }

        #endregion

    }
}
