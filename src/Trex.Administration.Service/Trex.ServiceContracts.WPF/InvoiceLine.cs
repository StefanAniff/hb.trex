//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Invoice))]
    public partial class InvoiceLine: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Text
        {
            get { return _text; }
            set
            {
                if (_text != value)
                {
                    _text = value;
                    OnPropertyChanged("Text");
                }
            }
        }
        private string _text;
    
        [DataMember]
        public double PricePrUnit
        {
            get { return _pricePrUnit; }
            set
            {
                if (_pricePrUnit != value)
                {
                    _pricePrUnit = value;
                    OnPropertyChanged("PricePrUnit");
                }
            }
        }
        private double _pricePrUnit;
    
        [DataMember]
        public int InvoiceID
        {
            get { return _invoiceID; }
            set
            {
                if (_invoiceID != value)
                {
                    ChangeTracker.RecordOriginalValue("InvoiceID", _invoiceID);
                    if (!IsDeserializing)
                    {
                        if (Invoice != null && Invoice.ID != value)
                        {
                            Invoice = null;
                        }
                    }
                    _invoiceID = value;
                    OnPropertyChanged("InvoiceID");
                }
            }
        }
        private int _invoiceID;
    
        [DataMember]
        public double Units
        {
            get { return _units; }
            set
            {
                if (_units != value)
                {
                    _units = value;
                    OnPropertyChanged("Units");
                }
            }
        }
        private double _units;
    
        [DataMember]
        public string Unit
        {
            get { return _unit; }
            set
            {
                if (_unit != value)
                {
                    _unit = value;
                    OnPropertyChanged("Unit");
                }
            }
        }
        private string _unit;
    
        [DataMember]
        public int UnitType
        {
            get { return _unitType; }
            set
            {
                if (_unitType != value)
                {
                    _unitType = value;
                    OnPropertyChanged("UnitType");
                }
            }
        }
        private int _unitType;
    
        [DataMember]
        public int SortIndex
        {
            get { return _sortIndex; }
            set
            {
                if (_sortIndex != value)
                {
                    _sortIndex = value;
                    OnPropertyChanged("SortIndex");
                }
            }
        }
        private int _sortIndex;
    
        [DataMember]
        public bool IsExpense
        {
            get { return _isExpense; }
            set
            {
                if (_isExpense != value)
                {
                    _isExpense = value;
                    OnPropertyChanged("IsExpense");
                }
            }
        }
        private bool _isExpense;
    
        [DataMember]
        public double VatPercentage
        {
            get { return _vatPercentage; }
            set
            {
                if (_vatPercentage != value)
                {
                    _vatPercentage = value;
                    OnPropertyChanged("VatPercentage");
                }
            }
        }
        private double _vatPercentage;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Invoice Invoice
        {
            get { return _invoice; }
            set
            {
                if (!ReferenceEquals(_invoice, value))
                {
                    var previousValue = _invoice;
                    _invoice = value;
                    FixupInvoice(previousValue);
                    OnNavigationPropertyChanged("Invoice");
                }
            }
        }
        private Invoice _invoice;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Invoice = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupInvoice(Invoice previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.InvoiceLines.Contains(this))
            {
                previousValue.InvoiceLines.Remove(this);
            }
    
            if (Invoice != null)
            {
                if (!Invoice.InvoiceLines.Contains(this))
                {
                    Invoice.InvoiceLines.Add(this);
                }
    
                InvoiceID = Invoice.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Invoice")
                    && (ChangeTracker.OriginalValues["Invoice"] == Invoice))
                {
                    ChangeTracker.OriginalValues.Remove("Invoice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Invoice", previousValue);
                }
                if (Invoice != null && !Invoice.ChangeTracker.ChangeTrackingEnabled)
                {
                    Invoice.StartTracking();
                }
            }
        }

        #endregion

    }
}
