
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace Trex.ServiceContracts
{


    public partial class CalculateInvoiceLines : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties


        [DataMember]
        public Nullable<double> BillableTime
        {
            get { return _billableTime; }
            set
            {
                if (_billableTime != value)
                {
                    OnComplexPropertyChanging();
                    _billableTime = value;
                    OnPropertyChanged("BillableTime");
                }
            }
        }
        private Nullable<double> _billableTime;


        [DataMember]
        public double Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    OnComplexPropertyChanging();
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private double _price;

        #endregion
        #region ChangeTracking


        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }

        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;

        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;


        public static void RecordComplexOriginalValues(String parentPropertyName, CalculateInvoiceLines complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }

            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }

            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.BillableTime", parentPropertyName), complexObject == null ? null : (object)complexObject.BillableTime);

            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Price", parentPropertyName), complexObject == null ? null : (object)complexObject.Price);

        }

        #endregion

    }

}
