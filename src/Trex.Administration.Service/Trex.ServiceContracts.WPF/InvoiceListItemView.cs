//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    
    public partial class InvoiceListItemView : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    OnComplexPropertyChanging();
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<int> InvoiceID
        {
            get { return _invoiceID; }
            set
            {
                if (_invoiceID != value)
                {
                    OnComplexPropertyChanging();
                    _invoiceID = value;
                    OnPropertyChanged("InvoiceID");
                }
            }
        }
        private Nullable<int> _invoiceID;
    
        [DataMember]
        public string CustomerName
        {
            get { return _customerName; }
            set
            {
                if (_customerName != value)
                {
                    OnComplexPropertyChanging();
                    _customerName = value;
                    OnPropertyChanged("CustomerName");
                }
            }
        }
        private string _customerName;
    
        [DataMember]
        public System.Guid Guid
        {
            get { return _guid; }
            set
            {
                if (_guid != value)
                {
                    OnComplexPropertyChanging();
                    _guid = value;
                    OnPropertyChanged("Guid");
                }
            }
        }
        private System.Guid _guid;
    
        [DataMember]
        public System.DateTime InvoiceDate
        {
            get { return _invoiceDate; }
            set
            {
                if (_invoiceDate != value)
                {
                    OnComplexPropertyChanging();
                    _invoiceDate = value;
                    OnPropertyChanged("InvoiceDate");
                }
            }
        }
        private System.DateTime _invoiceDate;
    
        [DataMember]
        public Nullable<int> InvoicePeriode
        {
            get { return _invoicePeriode; }
            set
            {
                if (_invoicePeriode != value)
                {
                    OnComplexPropertyChanging();
                    _invoicePeriode = value;
                    OnPropertyChanged("InvoicePeriode");
                }
            }
        }
        private Nullable<int> _invoicePeriode;
    
        [DataMember]
        public Nullable<System.DateTime> DueDate
        {
            get { return _dueDate; }
            set
            {
                if (_dueDate != value)
                {
                    OnComplexPropertyChanging();
                    _dueDate = value;
                    OnPropertyChanged("DueDate");
                }
            }
        }
        private Nullable<System.DateTime> _dueDate;
    
        [DataMember]
        public string Label
        {
            get { return _label; }
            set
            {
                if (_label != value)
                {
                    OnComplexPropertyChanging();
                    _label = value;
                    OnPropertyChanged("Label");
                }
            }
        }
        private string _label;
    
        [DataMember]
        public Nullable<double> ExclVAT
        {
            get { return _exclVAT; }
            set
            {
                if (_exclVAT != value)
                {
                    OnComplexPropertyChanging();
                    _exclVAT = value;
                    OnPropertyChanged("ExclVAT");
                }
            }
        }
        private Nullable<double> _exclVAT;
    
        [DataMember]
        public string Regarding
        {
            get { return _regarding; }
            set
            {
                if (_regarding != value)
                {
                    OnComplexPropertyChanging();
                    _regarding = value;
                    OnPropertyChanged("Regarding");
                }
            }
        }
        private string _regarding;
    
        [DataMember]
        public bool Closed
        {
            get { return _closed; }
            set
            {
                if (_closed != value)
                {
                    OnComplexPropertyChanging();
                    _closed = value;
                    OnPropertyChanged("Closed");
                }
            }
        }
        private bool _closed;
    
        [DataMember]
        public int CustomerInvoiceGroupId
        {
            get { return _customerInvoiceGroupId; }
            set
            {
                if (_customerInvoiceGroupId != value)
                {
                    OnComplexPropertyChanging();
                    _customerInvoiceGroupId = value;
                    OnPropertyChanged("CustomerInvoiceGroupId");
                }
            }
        }
        private int _customerInvoiceGroupId;
    
        [DataMember]
        public System.DateTime StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    OnComplexPropertyChanging();
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private System.DateTime _startDate;
    
        [DataMember]
        public System.DateTime EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    OnComplexPropertyChanging();
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private System.DateTime _endDate;
    
        [DataMember]
        public bool Delivered
        {
            get { return _delivered; }
            set
            {
                if (_delivered != value)
                {
                    OnComplexPropertyChanging();
                    _delivered = value;
                    OnPropertyChanged("Delivered");
                }
            }
        }
        private bool _delivered;
    
        [DataMember]
        public Nullable<System.DateTime> DeliveredDate
        {
            get { return _deliveredDate; }
            set
            {
                if (_deliveredDate != value)
                {
                    OnComplexPropertyChanging();
                    _deliveredDate = value;
                    OnPropertyChanged("DeliveredDate");
                }
            }
        }
        private Nullable<System.DateTime> _deliveredDate;
    
        [DataMember]
        public string attention
        {
            get { return _attention; }
            set
            {
                if (_attention != value)
                {
                    OnComplexPropertyChanging();
                    _attention = value;
                    OnPropertyChanged("attention");
                }
            }
        }
        private string _attention;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    OnComplexPropertyChanging();
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public string CigAttention
        {
            get { return _cigAttention; }
            set
            {
                if (_cigAttention != value)
                {
                    OnComplexPropertyChanging();
                    _cigAttention = value;
                    OnPropertyChanged("CigAttention");
                }
            }
        }
        private string _cigAttention;
    
        [DataMember]
        public int SendFormat
        {
            get { return _sendFormat; }
            set
            {
                if (_sendFormat != value)
                {
                    OnComplexPropertyChanging();
                    _sendFormat = value;
                    OnPropertyChanged("SendFormat");
                }
            }
        }
        private int _sendFormat;
    
        [DataMember]
        public string CustomerManager
        {
            get { return _customerManager; }
            set
            {
                if (_customerManager != value)
                {
                    OnComplexPropertyChanging();
                    _customerManager = value;
                    OnPropertyChanged("CustomerManager");
                }
            }
        }
        private string _customerManager;
    
        [DataMember]
        public string ContactName
        {
            get { return _contactName; }
            set
            {
                if (_contactName != value)
                {
                    OnComplexPropertyChanging();
                    _contactName = value;
                    OnPropertyChanged("ContactName");
                }
            }
        }
        private string _contactName;
    
        [DataMember]
        public bool IsCreditNote
        {
            get { return _isCreditNote; }
            set
            {
                if (_isCreditNote != value)
                {
                    OnComplexPropertyChanging();
                    _isCreditNote = value;
                    OnPropertyChanged("IsCreditNote");
                }
            }
        }
        private bool _isCreditNote;
    
        [DataMember]
        public Nullable<int> InvoiceLinkId
        {
            get { return _invoiceLinkId; }
            set
            {
                if (_invoiceLinkId != value)
                {
                    OnComplexPropertyChanging();
                    _invoiceLinkId = value;
                    OnPropertyChanged("InvoiceLinkId");
                }
            }
        }
        private Nullable<int> _invoiceLinkId;
    
        [DataMember]
        public double AmountPaid
        {
            get { return _amountPaid; }
            set
            {
                if (_amountPaid != value)
                {
                    OnComplexPropertyChanging();
                    _amountPaid = value;
                    OnPropertyChanged("AmountPaid");
                }
            }
        }
        private double _amountPaid;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, InvoiceListItemView complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ID", parentPropertyName), complexObject == null ? null : (object)complexObject.ID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InvoiceID", parentPropertyName), complexObject == null ? null : (object)complexObject.InvoiceID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CustomerName", parentPropertyName), complexObject == null ? null : (object)complexObject.CustomerName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Guid", parentPropertyName), complexObject == null ? null : (object)complexObject.Guid);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InvoiceDate", parentPropertyName), complexObject == null ? null : (object)complexObject.InvoiceDate);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InvoicePeriode", parentPropertyName), complexObject == null ? null : (object)complexObject.InvoicePeriode);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DueDate", parentPropertyName), complexObject == null ? null : (object)complexObject.DueDate);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Label", parentPropertyName), complexObject == null ? null : (object)complexObject.Label);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ExclVAT", parentPropertyName), complexObject == null ? null : (object)complexObject.ExclVAT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Regarding", parentPropertyName), complexObject == null ? null : (object)complexObject.Regarding);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Closed", parentPropertyName), complexObject == null ? null : (object)complexObject.Closed);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CustomerInvoiceGroupId", parentPropertyName), complexObject == null ? null : (object)complexObject.CustomerInvoiceGroupId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.StartDate", parentPropertyName), complexObject == null ? null : (object)complexObject.StartDate);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.EndDate", parentPropertyName), complexObject == null ? null : (object)complexObject.EndDate);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Delivered", parentPropertyName), complexObject == null ? null : (object)complexObject.Delivered);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DeliveredDate", parentPropertyName), complexObject == null ? null : (object)complexObject.DeliveredDate);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.attention", parentPropertyName), complexObject == null ? null : (object)complexObject.attention);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Comment", parentPropertyName), complexObject == null ? null : (object)complexObject.Comment);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CigAttention", parentPropertyName), complexObject == null ? null : (object)complexObject.CigAttention);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SendFormat", parentPropertyName), complexObject == null ? null : (object)complexObject.SendFormat);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CustomerManager", parentPropertyName), complexObject == null ? null : (object)complexObject.CustomerManager);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ContactName", parentPropertyName), complexObject == null ? null : (object)complexObject.ContactName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsCreditNote", parentPropertyName), complexObject == null ? null : (object)complexObject.IsCreditNote);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InvoiceLinkId", parentPropertyName), complexObject == null ? null : (object)complexObject.InvoiceLinkId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.AmountPaid", parentPropertyName), complexObject == null ? null : (object)complexObject.AmountPaid);
        }

        #endregion

    }
}
