//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(InvoiceFile))]
    [KnownType(typeof(InvoiceLine))]
    [KnownType(typeof(TimeEntry))]
    [KnownType(typeof(User))]
    [KnownType(typeof(CustomerInvoiceGroup))]
    [KnownType(typeof(CreditNote))]
    [KnownType(typeof(InvoiceComment))]
    public partial class Invoice: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public System.DateTime CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private System.DateTime _createDate;
    
        [DataMember]
        public System.DateTime InvoiceDate
        {
            get { return _invoiceDate; }
            set
            {
                if (_invoiceDate != value)
                {
                    _invoiceDate = value;
                    OnPropertyChanged("InvoiceDate");
                }
            }
        }
        private System.DateTime _invoiceDate;
    
        [DataMember]
        public int CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedBy", _createdBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserID != value)
                        {
                            User = null;
                        }
                    }
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private int _createdBy;
    
        [DataMember]
        public double VAT
        {
            get { return _vAT; }
            set
            {
                if (_vAT != value)
                {
                    _vAT = value;
                    OnPropertyChanged("VAT");
                }
            }
        }
        private double _vAT;
    
        [DataMember]
        public string FooterText
        {
            get { return _footerText; }
            set
            {
                if (_footerText != value)
                {
                    _footerText = value;
                    OnPropertyChanged("FooterText");
                }
            }
        }
        private string _footerText;
    
        [DataMember]
        public System.DateTime StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private System.DateTime _startDate;
    
        [DataMember]
        public System.DateTime EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private System.DateTime _endDate;
    
        [DataMember]
        public bool Closed
        {
            get { return _closed; }
            set
            {
                if (_closed != value)
                {
                    _closed = value;
                    OnPropertyChanged("Closed");
                }
            }
        }
        private bool _closed;
    
        [DataMember]
        public Nullable<System.DateTime> DueDate
        {
            get { return _dueDate; }
            set
            {
                if (_dueDate != value)
                {
                    _dueDate = value;
                    OnPropertyChanged("DueDate");
                }
            }
        }
        private Nullable<System.DateTime> _dueDate;
    
        [DataMember]
        public string Regarding
        {
            get { return _regarding; }
            set
            {
                if (_regarding != value)
                {
                    _regarding = value;
                    OnPropertyChanged("Regarding");
                }
            }
        }
        private string _regarding;
    
        [DataMember]
        public Nullable<int> InvoiceID
        {
            get { return _invoiceID; }
            set
            {
                if (_invoiceID != value)
                {
                    _invoiceID = value;
                    OnPropertyChanged("InvoiceID");
                }
            }
        }
        private Nullable<int> _invoiceID;
    
        [DataMember]
        public int CustomerInvoiceGroupId
        {
            get { return _customerInvoiceGroupId; }
            set
            {
                if (_customerInvoiceGroupId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerInvoiceGroupId", _customerInvoiceGroupId);
                    if (!IsDeserializing)
                    {
                        if (CustomerInvoiceGroup != null && CustomerInvoiceGroup.CustomerInvoiceGroupID != value)
                        {
                            CustomerInvoiceGroup = null;
                        }
                    }
                    _customerInvoiceGroupId = value;
                    OnPropertyChanged("CustomerInvoiceGroupId");
                }
            }
        }
        private int _customerInvoiceGroupId;
    
        [DataMember]
        public System.Guid Guid
        {
            get { return _guid; }
            set
            {
                if (_guid != value)
                {
                    _guid = value;
                    OnPropertyChanged("Guid");
                }
            }
        }
        private System.Guid _guid;
    
        [DataMember]
        public bool Delivered
        {
            get { return _delivered; }
            set
            {
                if (_delivered != value)
                {
                    _delivered = value;
                    OnPropertyChanged("Delivered");
                }
            }
        }
        private bool _delivered;
    
        [DataMember]
        public bool IsCreditNote
        {
            get { return _isCreditNote; }
            set
            {
                if (_isCreditNote != value)
                {
                    _isCreditNote = value;
                    OnPropertyChanged("IsCreditNote");
                }
            }
        }
        private bool _isCreditNote;
    
        [DataMember]
        public Nullable<System.DateTime> DeliveredDate
        {
            get { return _deliveredDate; }
            set
            {
                if (_deliveredDate != value)
                {
                    _deliveredDate = value;
                    OnPropertyChanged("DeliveredDate");
                }
            }
        }
        private Nullable<System.DateTime> _deliveredDate;
    
        [DataMember]
        public Nullable<int> InvoiceLinkId
        {
            get { return _invoiceLinkId; }
            set
            {
                if (_invoiceLinkId != value)
                {
                    _invoiceLinkId = value;
                    OnPropertyChanged("InvoiceLinkId");
                }
            }
        }
        private Nullable<int> _invoiceLinkId;
    
        [DataMember]
        public string Attention
        {
            get { return _attention; }
            set
            {
                if (_attention != value)
                {
                    _attention = value;
                    OnPropertyChanged("Attention");
                }
            }
        }
        private string _attention;
    
        [DataMember]
        public double AmountPaid
        {
            get { return _amountPaid; }
            set
            {
                if (_amountPaid != value)
                {
                    _amountPaid = value;
                    OnPropertyChanged("AmountPaid");
                }
            }
        }
        private double _amountPaid;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<InvoiceFile> InvoiceFiles
        {
            get
            {
                if (_invoiceFiles == null)
                {
                    _invoiceFiles = new TrackableCollection<InvoiceFile>();
                    _invoiceFiles.CollectionChanged += FixupInvoiceFiles;
                }
                return _invoiceFiles;
            }
            set
            {
                if (!ReferenceEquals(_invoiceFiles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoiceFiles != null)
                    {
                        _invoiceFiles.CollectionChanged -= FixupInvoiceFiles;
                    }
                    _invoiceFiles = value;
                    if (_invoiceFiles != null)
                    {
                        _invoiceFiles.CollectionChanged += FixupInvoiceFiles;
                    }
                    OnNavigationPropertyChanged("InvoiceFiles");
                }
            }
        }
        private TrackableCollection<InvoiceFile> _invoiceFiles;
    
        [DataMember]
        public TrackableCollection<InvoiceLine> InvoiceLines
        {
            get
            {
                if (_invoiceLines == null)
                {
                    _invoiceLines = new TrackableCollection<InvoiceLine>();
                    _invoiceLines.CollectionChanged += FixupInvoiceLines;
                }
                return _invoiceLines;
            }
            set
            {
                if (!ReferenceEquals(_invoiceLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoiceLines != null)
                    {
                        _invoiceLines.CollectionChanged -= FixupInvoiceLines;
                    }
                    _invoiceLines = value;
                    if (_invoiceLines != null)
                    {
                        _invoiceLines.CollectionChanged += FixupInvoiceLines;
                    }
                    OnNavigationPropertyChanged("InvoiceLines");
                }
            }
        }
        private TrackableCollection<InvoiceLine> _invoiceLines;
    
        [DataMember]
        public TrackableCollection<TimeEntry> TimeEntries
        {
            get
            {
                if (_timeEntries == null)
                {
                    _timeEntries = new TrackableCollection<TimeEntry>();
                    _timeEntries.CollectionChanged += FixupTimeEntries;
                }
                return _timeEntries;
            }
            set
            {
                if (!ReferenceEquals(_timeEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timeEntries != null)
                    {
                        _timeEntries.CollectionChanged -= FixupTimeEntries;
                    }
                    _timeEntries = value;
                    if (_timeEntries != null)
                    {
                        _timeEntries.CollectionChanged += FixupTimeEntries;
                    }
                    OnNavigationPropertyChanged("TimeEntries");
                }
            }
        }
        private TrackableCollection<TimeEntry> _timeEntries;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public CustomerInvoiceGroup CustomerInvoiceGroup
        {
            get { return _customerInvoiceGroup; }
            set
            {
                if (!ReferenceEquals(_customerInvoiceGroup, value))
                {
                    var previousValue = _customerInvoiceGroup;
                    _customerInvoiceGroup = value;
                    FixupCustomerInvoiceGroup(previousValue);
                    OnNavigationPropertyChanged("CustomerInvoiceGroup");
                }
            }
        }
        private CustomerInvoiceGroup _customerInvoiceGroup;
    
        [DataMember]
        public TrackableCollection<CreditNote> CreditNote
        {
            get
            {
                if (_creditNote == null)
                {
                    _creditNote = new TrackableCollection<CreditNote>();
                    _creditNote.CollectionChanged += FixupCreditNote;
                }
                return _creditNote;
            }
            set
            {
                if (!ReferenceEquals(_creditNote, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_creditNote != null)
                    {
                        _creditNote.CollectionChanged -= FixupCreditNote;
                    }
                    _creditNote = value;
                    if (_creditNote != null)
                    {
                        _creditNote.CollectionChanged += FixupCreditNote;
                    }
                    OnNavigationPropertyChanged("CreditNote");
                }
            }
        }
        private TrackableCollection<CreditNote> _creditNote;
    
        [DataMember]
        public TrackableCollection<InvoiceComment> InvoiceComments
        {
            get
            {
                if (_invoiceComments == null)
                {
                    _invoiceComments = new TrackableCollection<InvoiceComment>();
                    _invoiceComments.CollectionChanged += FixupInvoiceComments;
                }
                return _invoiceComments;
            }
            set
            {
                if (!ReferenceEquals(_invoiceComments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_invoiceComments != null)
                    {
                        _invoiceComments.CollectionChanged -= FixupInvoiceComments;
                    }
                    _invoiceComments = value;
                    if (_invoiceComments != null)
                    {
                        _invoiceComments.CollectionChanged += FixupInvoiceComments;
                    }
                    OnNavigationPropertyChanged("InvoiceComments");
                }
            }
        }
        private TrackableCollection<InvoiceComment> _invoiceComments;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            InvoiceFiles.Clear();
            InvoiceLines.Clear();
            TimeEntries.Clear();
            User = null;
            CustomerInvoiceGroup = null;
            CreditNote.Clear();
            InvoiceComments.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Invoices.Contains(this))
            {
                previousValue.Invoices.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Invoices.Contains(this))
                {
                    User.Invoices.Add(this);
                }
    
                CreatedBy = User.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupCustomerInvoiceGroup(CustomerInvoiceGroup previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Invoices.Contains(this))
            {
                previousValue.Invoices.Remove(this);
            }
    
            if (CustomerInvoiceGroup != null)
            {
                if (!CustomerInvoiceGroup.Invoices.Contains(this))
                {
                    CustomerInvoiceGroup.Invoices.Add(this);
                }
    
                CustomerInvoiceGroupId = CustomerInvoiceGroup.CustomerInvoiceGroupID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CustomerInvoiceGroup")
                    && (ChangeTracker.OriginalValues["CustomerInvoiceGroup"] == CustomerInvoiceGroup))
                {
                    ChangeTracker.OriginalValues.Remove("CustomerInvoiceGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CustomerInvoiceGroup", previousValue);
                }
                if (CustomerInvoiceGroup != null && !CustomerInvoiceGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    CustomerInvoiceGroup.StartTracking();
                }
            }
        }
    
        private void FixupInvoiceFiles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (InvoiceFile item in e.NewItems)
                {
                    item.Invoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("InvoiceFiles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceFile item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoice, this))
                    {
                        item.Invoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InvoiceFiles", item);
                    }
                }
            }
        }
    
        private void FixupInvoiceLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (InvoiceLine item in e.NewItems)
                {
                    item.Invoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("InvoiceLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoice, this))
                    {
                        item.Invoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InvoiceLines", item);
                    }
                }
            }
        }
    
        private void FixupTimeEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimeEntry item in e.NewItems)
                {
                    item.Invoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimeEntries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimeEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoice, this))
                    {
                        item.Invoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimeEntries", item);
                    }
                }
            }
        }
    
        private void FixupCreditNote(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CreditNote item in e.NewItems)
                {
                    item.Invoices = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CreditNote", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CreditNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoices, this))
                    {
                        item.Invoices = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CreditNote", item);
                    }
                }
            }
        }
    
        private void FixupInvoiceComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (InvoiceComment item in e.NewItems)
                {
                    item.Invoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("InvoiceComments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceComment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoice, this))
                    {
                        item.Invoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InvoiceComments", item);
                    }
                }
            }
        }

        #endregion
    }
}
