//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Project))]
    [KnownType(typeof(Tag))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TimeEntry))]
    [KnownType(typeof(Task))]
    public partial class Task: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TaskID
        {
            get { return _taskID; }
            set
            {
                if (_taskID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskID = value;
                    OnPropertyChanged("TaskID");
                }
            }
        }
        private int _taskID;
    
        [DataMember]
        public string ParentID
        {
            get { return _parentID; }
            set
            {
                if (_parentID != value)
                {
                    _parentID = value;
                    OnPropertyChanged("ParentID");
                }
            }
        }
        private string _parentID;
    
        [DataMember]
        public System.Guid Guid
        {
            get { return _guid; }
            set
            {
                if (_guid != value)
                {
                    _guid = value;
                    OnPropertyChanged("Guid");
                }
            }
        }
        private System.Guid _guid;
    
        [DataMember]
        public int ProjectID
        {
            get { return _projectID; }
            set
            {
                if (_projectID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectID", _projectID);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectID != value)
                        {
                            Project = null;
                        }
                    }
                    _projectID = value;
                    OnPropertyChanged("ProjectID");
                }
            }
        }
        private int _projectID;
    
        [DataMember]
        public int CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedBy", _createdBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserID != value)
                        {
                            User = null;
                        }
                    }
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private int _createdBy;
    
        [DataMember]
        public System.DateTime ModifyDate
        {
            get { return _modifyDate; }
            set
            {
                if (_modifyDate != value)
                {
                    _modifyDate = value;
                    OnPropertyChanged("ModifyDate");
                }
            }
        }
        private System.DateTime _modifyDate;
    
        [DataMember]
        public System.DateTime CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private System.DateTime _createDate;
    
        [DataMember]
        public string TaskName
        {
            get { return _taskName; }
            set
            {
                if (_taskName != value)
                {
                    _taskName = value;
                    OnPropertyChanged("TaskName");
                }
            }
        }
        private string _taskName;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public double TimeEstimated
        {
            get { return _timeEstimated; }
            set
            {
                if (_timeEstimated != value)
                {
                    _timeEstimated = value;
                    OnPropertyChanged("TimeEstimated");
                }
            }
        }
        private double _timeEstimated;
    
        [DataMember]
        public double TimeLeft
        {
            get { return _timeLeft; }
            set
            {
                if (_timeLeft != value)
                {
                    _timeLeft = value;
                    OnPropertyChanged("TimeLeft");
                }
            }
        }
        private double _timeLeft;
    
        [DataMember]
        public bool Closed
        {
            get { return _closed; }
            set
            {
                if (_closed != value)
                {
                    _closed = value;
                    OnPropertyChanged("Closed");
                }
            }
        }
        private bool _closed;
    
        [DataMember]
        public double WorstCaseEstimate
        {
            get { return _worstCaseEstimate; }
            set
            {
                if (_worstCaseEstimate != value)
                {
                    _worstCaseEstimate = value;
                    OnPropertyChanged("WorstCaseEstimate");
                }
            }
        }
        private double _worstCaseEstimate;
    
        [DataMember]
        public double BestCaseEstimate
        {
            get { return _bestCaseEstimate; }
            set
            {
                if (_bestCaseEstimate != value)
                {
                    _bestCaseEstimate = value;
                    OnPropertyChanged("BestCaseEstimate");
                }
            }
        }
        private double _bestCaseEstimate;
    
        [DataMember]
        public Nullable<int> TagID
        {
            get { return _tagID; }
            set
            {
                if (_tagID != value)
                {
                    ChangeTracker.RecordOriginalValue("TagID", _tagID);
                    if (!IsDeserializing)
                    {
                        if (Tag != null && Tag.TagID != value)
                        {
                            Tag = null;
                        }
                    }
                    _tagID = value;
                    OnPropertyChanged("TagID");
                }
            }
        }
        private Nullable<int> _tagID;
    
        [DataMember]
        public double RealisticEstimate
        {
            get { return _realisticEstimate; }
            set
            {
                if (_realisticEstimate != value)
                {
                    _realisticEstimate = value;
                    OnPropertyChanged("RealisticEstimate");
                }
            }
        }
        private double _realisticEstimate;
    
        [DataMember]
        public bool Inactive
        {
            get { return _inactive; }
            set
            {
                if (_inactive != value)
                {
                    _inactive = value;
                    OnPropertyChanged("Inactive");
                }
            }
        }
        private bool _inactive;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private Nullable<System.DateTime> _changeDate;
    
        [DataMember]
        public Nullable<int> ChangedBy
        {
            get { return _changedBy; }
            set
            {
                if (_changedBy != value)
                {
                    _changedBy = value;
                    OnPropertyChanged("ChangedBy");
                }
            }
        }
        private Nullable<int> _changedBy;
    
        [DataMember]
        public int TimeRegistrationTypeId
        {
            get { return _timeRegistrationTypeId; }
            set
            {
                if (_timeRegistrationTypeId != value)
                {
                    _timeRegistrationTypeId = value;
                    OnPropertyChanged("TimeRegistrationTypeId");
                }
            }
        }
        private int _timeRegistrationTypeId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public Tag Tag
        {
            get { return _tag; }
            set
            {
                if (!ReferenceEquals(_tag, value))
                {
                    var previousValue = _tag;
                    _tag = value;
                    FixupTag(previousValue);
                    OnNavigationPropertyChanged("Tag");
                }
            }
        }
        private Tag _tag;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TrackableCollection<TimeEntry> TimeEntries
        {
            get
            {
                if (_timeEntries == null)
                {
                    _timeEntries = new TrackableCollection<TimeEntry>();
                    _timeEntries.CollectionChanged += FixupTimeEntries;
                }
                return _timeEntries;
            }
            set
            {
                if (!ReferenceEquals(_timeEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timeEntries != null)
                    {
                        _timeEntries.CollectionChanged -= FixupTimeEntries;
                    }
                    _timeEntries = value;
                    if (_timeEntries != null)
                    {
                        _timeEntries.CollectionChanged += FixupTimeEntries;
                    }
                    OnNavigationPropertyChanged("TimeEntries");
                }
            }
        }
        private TrackableCollection<TimeEntry> _timeEntries;
    
        [DataMember]
        public TrackableCollection<Task> Tasks1
        {
            get
            {
                if (_tasks1 == null)
                {
                    _tasks1 = new TrackableCollection<Task>();
                    _tasks1.CollectionChanged += FixupTasks1;
                }
                return _tasks1;
            }
            set
            {
                if (!ReferenceEquals(_tasks1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks1 != null)
                    {
                        _tasks1.CollectionChanged -= FixupTasks1;
                    }
                    _tasks1 = value;
                    if (_tasks1 != null)
                    {
                        _tasks1.CollectionChanged += FixupTasks1;
                    }
                    OnNavigationPropertyChanged("Tasks1");
                }
            }
        }
        private TrackableCollection<Task> _tasks1;
    
        [DataMember]
        public TrackableCollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    _tasks = new TrackableCollection<Task>();
                    _tasks.CollectionChanged += FixupTasks;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged += FixupTasks;
                    }
                    OnNavigationPropertyChanged("Tasks");
                }
            }
        }
        private TrackableCollection<Task> _tasks;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Project = null;
            Tag = null;
            User = null;
            TimeEntries.Clear();
            Tasks1.Clear();
            Tasks.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.Tasks.Contains(this))
                {
                    Project.Tasks.Add(this);
                }
    
                ProjectID = Project.ProjectID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupTag(Tag previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Tag != null)
            {
                if (!Tag.Tasks.Contains(this))
                {
                    Tag.Tasks.Add(this);
                }
    
                TagID = Tag.TagID;
            }
            else if (!skipKeys)
            {
                TagID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tag")
                    && (ChangeTracker.OriginalValues["Tag"] == Tag))
                {
                    ChangeTracker.OriginalValues.Remove("Tag");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tag", previousValue);
                }
                if (Tag != null && !Tag.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tag.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Tasks.Contains(this))
                {
                    User.Tasks.Add(this);
                }
    
                CreatedBy = User.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupTimeEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimeEntry item in e.NewItems)
                {
                    item.Task = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimeEntries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimeEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.Task, this))
                    {
                        item.Task = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimeEntries", item);
                    }
                }
            }
        }
    
        private void FixupTasks1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    if (!item.Tasks.Contains(this))
                    {
                        item.Tasks.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (item.Tasks.Contains(this))
                    {
                        item.Tasks.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks1", item);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    if (!item.Tasks1.Contains(this))
                    {
                        item.Tasks1.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (item.Tasks1.Contains(this))
                    {
                        item.Tasks1.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks", item);
                    }
                }
            }
        }

        #endregion

    }
}
