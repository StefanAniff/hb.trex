//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Invoice))]
    [KnownType(typeof(Task))]
    [KnownType(typeof(TimeEntryType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(CreditNote))]
    [KnownType(typeof(DocumentType))]
    public partial class TimeEntry: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TimeEntryID
        {
            get { return _timeEntryID; }
            set
            {
                if (_timeEntryID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TimeEntryID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _timeEntryID = value;
                    OnPropertyChanged("TimeEntryID");
                }
            }
        }
        private int _timeEntryID;
    
        [DataMember]
        public int TaskID
        {
            get { return _taskID; }
            set
            {
                if (_taskID != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskID", _taskID);
                    if (!IsDeserializing)
                    {
                        if (Task != null && Task.TaskID != value)
                        {
                            Task = null;
                        }
                    }
                    _taskID = value;
                    OnPropertyChanged("TaskID");
                }
            }
        }
        private int _taskID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (User1 != null && User1.UserID != value)
                        {
                            User1 = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public System.DateTime StartTime
        {
            get { return _startTime; }
            set
            {
                if (_startTime != value)
                {
                    _startTime = value;
                    OnPropertyChanged("StartTime");
                }
            }
        }
        private System.DateTime _startTime;
    
        [DataMember]
        public System.DateTime EndTime
        {
            get { return _endTime; }
            set
            {
                if (_endTime != value)
                {
                    _endTime = value;
                    OnPropertyChanged("EndTime");
                }
            }
        }
        private System.DateTime _endTime;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public double PauseTime
        {
            get { return _pauseTime; }
            set
            {
                if (_pauseTime != value)
                {
                    _pauseTime = value;
                    OnPropertyChanged("PauseTime");
                }
            }
        }
        private double _pauseTime;
    
        [DataMember]
        public double BillableTime
        {
            get { return _billableTime; }
            set
            {
                if (_billableTime != value)
                {
                    _billableTime = value;
                    OnPropertyChanged("BillableTime");
                }
            }
        }
        private double _billableTime;
    
        [DataMember]
        public bool Billable
        {
            get { return _billable; }
            set
            {
                if (_billable != value)
                {
                    _billable = value;
                    OnPropertyChanged("Billable");
                }
            }
        }
        private bool _billable;
    
        [DataMember]
        public double Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private double _price;
    
        [DataMember]
        public double TimeSpent
        {
            get { return _timeSpent; }
            set
            {
                if (_timeSpent != value)
                {
                    _timeSpent = value;
                    OnPropertyChanged("TimeSpent");
                }
            }
        }
        private double _timeSpent;
    
        [DataMember]
        public Nullable<int> InvoiceId
        {
            get { return _invoiceId; }
            set
            {
                if (_invoiceId != value)
                {
                    ChangeTracker.RecordOriginalValue("InvoiceId", _invoiceId);
                    if (!IsDeserializing)
                    {
                        if (Invoice != null && Invoice.ID != value)
                        {
                            Invoice = null;
                        }
                    }
                    _invoiceId = value;
                    OnPropertyChanged("InvoiceId");
                }
            }
        }
        private Nullable<int> _invoiceId;
    
        [DataMember]
        public System.Guid Guid
        {
            get { return _guid; }
            set
            {
                if (_guid != value)
                {
                    _guid = value;
                    OnPropertyChanged("Guid");
                }
            }
        }
        private System.Guid _guid;
    
        [DataMember]
        public int TimeEntryTypeId
        {
            get { return _timeEntryTypeId; }
            set
            {
                if (_timeEntryTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("TimeEntryTypeId", _timeEntryTypeId);
                    if (!IsDeserializing)
                    {
                        if (TimeEntryType != null && TimeEntryType.TimeEntryTypeId != value)
                        {
                            TimeEntryType = null;
                        }
                    }
                    _timeEntryTypeId = value;
                    OnPropertyChanged("TimeEntryTypeId");
                }
            }
        }
        private int _timeEntryTypeId;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private Nullable<System.DateTime> _changeDate;
    
        [DataMember]
        public Nullable<int> ChangedBy
        {
            get { return _changedBy; }
            set
            {
                if (_changedBy != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangedBy", _changedBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserID != value)
                        {
                            User = null;
                        }
                    }
                    _changedBy = value;
                    OnPropertyChanged("ChangedBy");
                }
            }
        }
        private Nullable<int> _changedBy;
    
        [DataMember]
        public Nullable<System.DateTime> CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public int ClientSourceId
        {
            get { return _clientSourceId; }
            set
            {
                if (_clientSourceId != value)
                {
                    _clientSourceId = value;
                    OnPropertyChanged("ClientSourceId");
                }
            }
        }
        private int _clientSourceId;
    
        [DataMember]
        public int DocumentType
        {
            get { return _documentType; }
            set
            {
                if (_documentType != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentType", _documentType);
                    if (!IsDeserializing)
                    {
                        if (DocumentType1 != null && DocumentType1.ID != value)
                        {
                            DocumentType1 = null;
                        }
                    }
                    _documentType = value;
                    OnPropertyChanged("DocumentType");
                }
            }
        }
        private int _documentType;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Invoice Invoice
        {
            get { return _invoice; }
            set
            {
                if (!ReferenceEquals(_invoice, value))
                {
                    var previousValue = _invoice;
                    _invoice = value;
                    FixupInvoice(previousValue);
                    OnNavigationPropertyChanged("Invoice");
                }
            }
        }
        private Invoice _invoice;
    
        [DataMember]
        public Task Task
        {
            get { return _task; }
            set
            {
                if (!ReferenceEquals(_task, value))
                {
                    var previousValue = _task;
                    _task = value;
                    FixupTask(previousValue);
                    OnNavigationPropertyChanged("Task");
                }
            }
        }
        private Task _task;
    
        [DataMember]
        public TimeEntryType TimeEntryType
        {
            get { return _timeEntryType; }
            set
            {
                if (!ReferenceEquals(_timeEntryType, value))
                {
                    var previousValue = _timeEntryType;
                    _timeEntryType = value;
                    FixupTimeEntryType(previousValue);
                    OnNavigationPropertyChanged("TimeEntryType");
                }
            }
        }
        private TimeEntryType _timeEntryType;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public User User1
        {
            get { return _user1; }
            set
            {
                if (!ReferenceEquals(_user1, value))
                {
                    var previousValue = _user1;
                    _user1 = value;
                    FixupUser1(previousValue);
                    OnNavigationPropertyChanged("User1");
                }
            }
        }
        private User _user1;
    
        [DataMember]
        public TrackableCollection<CreditNote> CreditNote
        {
            get
            {
                if (_creditNote == null)
                {
                    _creditNote = new TrackableCollection<CreditNote>();
                    _creditNote.CollectionChanged += FixupCreditNote;
                }
                return _creditNote;
            }
            set
            {
                if (!ReferenceEquals(_creditNote, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_creditNote != null)
                    {
                        _creditNote.CollectionChanged -= FixupCreditNote;
                    }
                    _creditNote = value;
                    if (_creditNote != null)
                    {
                        _creditNote.CollectionChanged += FixupCreditNote;
                    }
                    OnNavigationPropertyChanged("CreditNote");
                }
            }
        }
        private TrackableCollection<CreditNote> _creditNote;
    
        [DataMember]
        public DocumentType DocumentType1
        {
            get { return _documentType1; }
            set
            {
                if (!ReferenceEquals(_documentType1, value))
                {
                    var previousValue = _documentType1;
                    _documentType1 = value;
                    FixupDocumentType1(previousValue);
                    OnNavigationPropertyChanged("DocumentType1");
                }
            }
        }
        private DocumentType _documentType1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Invoice = null;
            Task = null;
            TimeEntryType = null;
            User = null;
            User1 = null;
            CreditNote.Clear();
            DocumentType1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupInvoice(Invoice previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimeEntries.Contains(this))
            {
                previousValue.TimeEntries.Remove(this);
            }
    
            if (Invoice != null)
            {
                if (!Invoice.TimeEntries.Contains(this))
                {
                    Invoice.TimeEntries.Add(this);
                }
    
                InvoiceId = Invoice.ID;
            }
            else if (!skipKeys)
            {
                InvoiceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Invoice")
                    && (ChangeTracker.OriginalValues["Invoice"] == Invoice))
                {
                    ChangeTracker.OriginalValues.Remove("Invoice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Invoice", previousValue);
                }
                if (Invoice != null && !Invoice.ChangeTracker.ChangeTrackingEnabled)
                {
                    Invoice.StartTracking();
                }
            }
        }
    
        private void FixupTask(Task previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimeEntries.Contains(this))
            {
                previousValue.TimeEntries.Remove(this);
            }
    
            if (Task != null)
            {
                if (!Task.TimeEntries.Contains(this))
                {
                    Task.TimeEntries.Add(this);
                }
    
                TaskID = Task.TaskID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Task")
                    && (ChangeTracker.OriginalValues["Task"] == Task))
                {
                    ChangeTracker.OriginalValues.Remove("Task");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Task", previousValue);
                }
                if (Task != null && !Task.ChangeTracker.ChangeTrackingEnabled)
                {
                    Task.StartTracking();
                }
            }
        }
    
        private void FixupTimeEntryType(TimeEntryType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimeEntries.Contains(this))
            {
                previousValue.TimeEntries.Remove(this);
            }
    
            if (TimeEntryType != null)
            {
                if (!TimeEntryType.TimeEntries.Contains(this))
                {
                    TimeEntryType.TimeEntries.Add(this);
                }
    
                TimeEntryTypeId = TimeEntryType.TimeEntryTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TimeEntryType")
                    && (ChangeTracker.OriginalValues["TimeEntryType"] == TimeEntryType))
                {
                    ChangeTracker.OriginalValues.Remove("TimeEntryType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TimeEntryType", previousValue);
                }
                if (TimeEntryType != null && !TimeEntryType.ChangeTracker.ChangeTrackingEnabled)
                {
                    TimeEntryType.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimeEntries.Contains(this))
            {
                previousValue.TimeEntries.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.TimeEntries.Contains(this))
                {
                    User.TimeEntries.Add(this);
                }
    
                ChangedBy = User.UserID;
            }
            else if (!skipKeys)
            {
                ChangedBy = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupUser1(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimeEntries1.Contains(this))
            {
                previousValue.TimeEntries1.Remove(this);
            }
    
            if (User1 != null)
            {
                if (!User1.TimeEntries1.Contains(this))
                {
                    User1.TimeEntries1.Add(this);
                }
    
                UserID = User1.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User1")
                    && (ChangeTracker.OriginalValues["User1"] == User1))
                {
                    ChangeTracker.OriginalValues.Remove("User1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User1", previousValue);
                }
                if (User1 != null && !User1.ChangeTracker.ChangeTrackingEnabled)
                {
                    User1.StartTracking();
                }
            }
        }
    
        private void FixupDocumentType1(DocumentType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimeEntries.Contains(this))
            {
                previousValue.TimeEntries.Remove(this);
            }
    
            if (DocumentType1 != null)
            {
                if (!DocumentType1.TimeEntries.Contains(this))
                {
                    DocumentType1.TimeEntries.Add(this);
                }
    
                DocumentType = DocumentType1.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DocumentType1")
                    && (ChangeTracker.OriginalValues["DocumentType1"] == DocumentType1))
                {
                    ChangeTracker.OriginalValues.Remove("DocumentType1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DocumentType1", previousValue);
                }
                if (DocumentType1 != null && !DocumentType1.ChangeTracker.ChangeTrackingEnabled)
                {
                    DocumentType1.StartTracking();
                }
            }
        }
    
        private void FixupCreditNote(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CreditNote item in e.NewItems)
                {
                    item.TimeEntries = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CreditNote", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CreditNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.TimeEntries, this))
                    {
                        item.TimeEntries = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CreditNote", item);
                    }
                }
            }
        }

        #endregion

    }
}
