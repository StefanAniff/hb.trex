//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Trex.ServiceContracts
{
    
    public partial class CustomersInvoiceView : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    OnComplexPropertyChanging();
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private int _customerID;
    
        [DataMember]
        public string CustomerName
        {
            get { return _customerName; }
            set
            {
                if (_customerName != value)
                {
                    OnComplexPropertyChanging();
                    _customerName = value;
                    OnPropertyChanged("CustomerName");
                }
            }
        }
        private string _customerName;
    
        [DataMember]
        public Nullable<System.DateTime> FirstDateNotInvoiced
        {
            get { return _firstDateNotInvoiced; }
            set
            {
                if (_firstDateNotInvoiced != value)
                {
                    OnComplexPropertyChanging();
                    _firstDateNotInvoiced = value;
                    OnPropertyChanged("FirstDateNotInvoiced");
                }
            }
        }
        private Nullable<System.DateTime> _firstDateNotInvoiced;
    
        [DataMember]
        public Nullable<double> InventoryValue
        {
            get { return _inventoryValue; }
            set
            {
                if (_inventoryValue != value)
                {
                    OnComplexPropertyChanging();
                    _inventoryValue = value;
                    OnPropertyChanged("InventoryValue");
                }
            }
        }
        private Nullable<double> _inventoryValue;
    
        [DataMember]
        public Nullable<int> Drafts
        {
            get { return _drafts; }
            set
            {
                if (_drafts != value)
                {
                    OnComplexPropertyChanging();
                    _drafts = value;
                    OnPropertyChanged("Drafts");
                }
            }
        }
        private Nullable<int> _drafts;
    
        [DataMember]
        public Nullable<double> NonBillableTime
        {
            get { return _nonBillableTime; }
            set
            {
                if (_nonBillableTime != value)
                {
                    OnComplexPropertyChanging();
                    _nonBillableTime = value;
                    OnPropertyChanged("NonBillableTime");
                }
            }
        }
        private Nullable<double> _nonBillableTime;
    
        [DataMember]
        public Nullable<bool> @internal
        {
            get { return _internal; }
            set
            {
                if (_internal != value)
                {
                    OnComplexPropertyChanging();
                    _internal = value;
                    OnPropertyChanged("internal");
                }
            }
        }
        private Nullable<bool> _internal;
    
        [DataMember]
        public Nullable<double> OverduePrice
        {
            get { return _overduePrice; }
            set
            {
                if (_overduePrice != value)
                {
                    OnComplexPropertyChanging();
                    _overduePrice = value;
                    OnPropertyChanged("OverduePrice");
                }
            }
        }
        private Nullable<double> _overduePrice;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, CustomersInvoiceView complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CustomerID", parentPropertyName), complexObject == null ? null : (object)complexObject.CustomerID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CustomerName", parentPropertyName), complexObject == null ? null : (object)complexObject.CustomerName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FirstDateNotInvoiced", parentPropertyName), complexObject == null ? null : (object)complexObject.FirstDateNotInvoiced);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InventoryValue", parentPropertyName), complexObject == null ? null : (object)complexObject.InventoryValue);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Drafts", parentPropertyName), complexObject == null ? null : (object)complexObject.Drafts);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.NonBillableTime", parentPropertyName), complexObject == null ? null : (object)complexObject.NonBillableTime);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.internal", parentPropertyName), complexObject == null ? null : (object)complexObject.@internal);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.OverduePrice", parentPropertyName), complexObject == null ? null : (object)complexObject.OverduePrice);
        }

        #endregion

    }
}
