/*
Deployment script for trex.dk

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "trex.dk"
:setvar DefaultFilePrefix "trex.dk"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[Tasks].[Task_Inactive_Project]...';


GO
DROP INDEX [Task_Inactive_Project]
    ON [dbo].[Tasks];


GO
PRINT N'Dropping [dbo].[AggregatedTimeEntriesPrTaskPrDayPrInvoice]...';


GO
DROP FUNCTION [dbo].[AggregatedTimeEntriesPrTaskPrDayPrInvoice];


GO
PRINT N'Dropping [dbo].[AggregatedCreditNotesPrTaskPrDayPrInvoice]...';


GO
DROP FUNCTION [dbo].[AggregatedCreditNotesPrTaskPrDayPrInvoice];


GO
PRINT N'Altering [dbo].[Customers]...';


GO
ALTER TABLE [dbo].[Customers]
    ADD [Internal] BIT NULL,
        [UserId]   INT NULL;


GO
PRINT N'Altering [dbo].[Invoices]...';


GO
ALTER TABLE [dbo].[Invoices]
    ADD [Attention] NVARCHAR (100) NULL;


GO
PRINT N'Altering [dbo].[Projects]...';


GO
ALTER TABLE [dbo].[Projects]
    ADD [EstimatedHours] INT NULL;


GO
PRINT N'Creating [dbo].[i]...';


GO
CREATE TABLE [dbo].[i] (
    [ID] INT IDENTITY (1, 1) NOT NULL
);


GO
PRINT N'Creating [dbo].[InvoiceComments]...';


GO
CREATE TABLE [dbo].[InvoiceComments] (
    [InvoiceCommentID] INT            IDENTITY (1, 1) NOT NULL,
    [UserID]           INT            NOT NULL,
    [InvoiceID]        INT            NOT NULL,
    [Comment]          NVARCHAR (255) NULL,
    [TimeStamp]        DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([InvoiceCommentID] ASC)
);


GO
PRINT N'Creating pk_Version...';


GO
ALTER TABLE [dbo].[Version]
    ADD CONSTRAINT [pk_Version] PRIMARY KEY CLUSTERED ([Version] ASC);


GO
PRINT N'Creating Foreign Key on [dbo].[InvoiceComments]....';


GO
ALTER TABLE [dbo].[InvoiceComments] WITH NOCHECK
    ADD FOREIGN KEY ([InvoiceID]) REFERENCES [dbo].[Invoices] ([ID]);


GO
PRINT N'Creating Foreign Key on [dbo].[InvoiceComments]....';


GO
ALTER TABLE [dbo].[InvoiceComments] WITH NOCHECK
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating Foreign Key on [dbo].[Customers]....';


GO
ALTER TABLE [dbo].[Customers] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Altering [dbo].[FindVAT]...';


GO

ALTER FUNCTION [dbo].[FindVAT]
(
	@invoiceId int
)
RETURNS float
AS
BEGIN
	-- Declare the return variable here
	DECLARE @result float;
	DECLARE @temp TABLE( exclVat float );


	INSERT INTO @temp
	SELECT
		CASE
			WHEN (il.PricePrUnit * il.Units) IS NULL
				THEN 0
				ELSE (
				CASE
					WHEN il.UnitType = 2
						THEN il.PricePrUnit
						ELSE il.PricePrUnit * il.Units
				END)
		END 
	FROM InvoiceLines il
	WHERE il.InvoiceID = @invoiceId

	SET @result = (SELECT SUM(t.exclVat)
	FROM @temp t)
	
	
	RETURN @result;

END
GO
PRINT N'Creating [dbo].[AggregatedTimeEntriesPrTaskPrDayPrInvoice]...';


GO

CREATE FUNCTION [dbo].[AggregatedTimeEntriesPrTaskPrDayPrInvoice] 
(
	@InvoiceId INT,
	@FixedPrice BIT
)
RETURNS TABLE
AS
RETURN
(
	--First, sum all timeentries,grouped by date, and round time to nearest quarter
		SELECT  
		t.customerId AS CustomerId,   
		t.Customer AS CustomerName, 
		t.ProjectID,
		t.Project, 
		t.TaskID,
		t.Task, 
		SUM(t.TimeSpent) AS TimeSpent, 
		t.Price,
		t.Billable,
		t.InvoiceNumber,
		t.FixedPrice,
		t.FixedPriceProject
	FROM (	
		SELECT   
			dbo.ConvertToSmallDate(te.StartTime) AS TaskDate, 
			c.CustomerName AS Customer,
			c.customerId,
			p.ProjectName AS Project, 
			p.ProjectID,
			t.TaskName AS Task,
			t.TaskID,
			dbo.RoundUpToNextQuarter(SUM(te.TimeSpent)) AS TimeSpent,
			te.Price,
			te.Billable,
			i.ID AS InvoiceNumber,
			u.UserID,
			p.FixedPriceProject,
			p.FixedPrice
		FROM dbo.TimeEntries AS te 
			INNER JOIN dbo.Tasks AS t ON t.TaskID = te.TaskID 
			INNER JOIN dbo.Projects AS p ON p.ProjectID = t.ProjectID 
			INNER JOIN dbo.Customers AS c ON c.CustomerID = p.CustomerID
			INNER JOIN dbo.Invoices AS i ON te.InvoiceId = i.ID
			INNER JOIN dbo.Users AS u ON u.UserID = te.UserID
		WHERE 
			i.ID = @InvoiceId
			AND p.FixedPriceProject = @FixedPrice
		GROUP BY 
			dbo.ConvertToSmallDate(te.StartTime), 
			c.CustomerName, 
			p.ProjectName, 
			p.ProjectID,
			t.TaskName,
			t.TaskID,
			te.Price,
			c.customerId,
			te.Billable,
			i.ID, 
			u.UserID,
			p.FixedPriceProject,
			p.FixedPrice
		) t
	GROUP BY 
		t.Customer, 
		t.ProjectID,
		t.Project, 
		t.TaskID,
		t.Task,
		t.Price,
		t.Billable,
		t.InvoiceNumber,
		t.CustomerId,
		t.FixedPrice,
		t.FixedPriceProject
)
GO
PRINT N'Refreshing [dbo].[AggregatedTimeEntriesPrTaskPrDay]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.AggregatedTimeEntriesPrTaskPrDay';


GO
PRINT N'Creating [dbo].[AggregatedCreditNotesPrTaskPrDayPrInvoice]...';


GO

CREATE FUNCTION [dbo].[AggregatedCreditNotesPrTaskPrDayPrInvoice] 
(
	@InvoiceId INT,
	@FixedPrice BIT
)
RETURNS TABLE
AS
RETURN
(
	--First, sum all timeentries,grouped by date, and round time to nearest quarter
		SELECT  
		t.customerId AS CustomerId,   
		t.Customer AS CustomerName, 
		t.ProjectID,
		t.Project, 
		t.TaskID,
		t.Task, 
		SUM(t.TimeSpent) AS TimeSpent, 
		t.Price,
		t.Billable,
		t.InvoiceNumber,
		t.FixedPrice,
		t.FixedPriceProject
	FROM (	
		SELECT   
			dbo.ConvertToSmallDate(cn.StartTime) AS TaskDate, 
			c.CustomerName AS Customer,
			c.customerId,
			p.ProjectName AS Project, 
			p.ProjectID,
			t.TaskName AS Task,
			t.TaskID,
			dbo.RoundUpToNextQuarter(SUM(cn.TimeSpent)) AS TimeSpent,
			cn.Price,
			cn.Billable,
			i.ID AS InvoiceNumber,
			u.UserID,
			p.FixedPriceProject,
			p.FixedPrice
		FROM dbo.CreditNote AS cn 
			INNER JOIN dbo.Tasks AS t ON t.TaskID = cn.TaskID 
			INNER JOIN dbo.Projects AS p ON p.ProjectID = t.ProjectID 
			INNER JOIN dbo.Customers AS c ON c.CustomerID = p.CustomerID
			INNER JOIN dbo.Invoices AS i ON cn.InvoiceId = i.ID
			INNER JOIN dbo.Users AS u ON u.UserID = cn.UserID
		WHERE 
			i.ID = @InvoiceId
		GROUP BY 
			dbo.ConvertToSmallDate(cn.StartTime), 
			c.CustomerName, 
			p.ProjectName, 
			p.ProjectID,
			t.TaskName,
			t.TaskID,
			cn.Price,
			c.customerId,
			cn.Billable,
			i.ID, 
			u.UserID,
			p.FixedPriceProject,
			p.FixedPrice
		) t
	WHERE t.FixedPriceProject = @FixedPrice
	GROUP BY 
		t.Customer, 
		t.ProjectID,
		t.Project, 
		t.TaskID,
		t.Task,
		t.Price,
		t.Billable,
		t.InvoiceNumber,
		t.CustomerId,
		t.FixedPrice,
		t.FixedPriceProject
)
GO
PRINT N'Refreshing [dbo].[FindBillableTimeEntries]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.FindBillableTimeEntries';


GO
PRINT N'Refreshing [dbo].[FindAllTimeEntries]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.FindAllTimeEntries';


GO
PRINT N'Creating [dbo].[GetDebitPrice]...';


GO

CREATE FUNCTION [dbo].[GetDebitPrice] 
(
	@customerId INT, 
	@startdate DATETIME, 
	@enddate DATETIME, 
	@billable BIT
	
)
RETURNS TABLE 
AS
RETURN
(
	SELECT
		CASE
			WHEN (t.PricePrUnit * t.Units) IS NULL
				THEN 0
				ELSE (
				CASE
					WHEN t.UnitType = 2
						THEN SUM(t.PricePrUnit)
						ELSE SUM(t.PricePrUnit * t.Units)
				END)
		END AS Price
	FROM(
		SELECT
			il.Units,
			il.PricePrUnit,
			il.UnitType                   
			  FROM Customers c
			  INNER JOIN CustomerInvoiceGroup cig on cig.CustomerID = c.CustomerID
			  INNER JOIN Invoices i on i.CustomerInvoiceGroupId = cig.CustomerInvoiceGroupID
			  INNER JOIN InvoiceLines il on il.InvoiceID = i.ID
			  
	WHERE
	c.CustomerID = @customerId 
	AND i.InvoiceID IS NOT NULL 
	AND i.Delivered = 1 
	AND i.DueDate < GETDATE() 
	AND i.Closed = 0
		GROUP BY
		c.CustomerID,
		i.InvoiceID,
		i.Delivered,
		i.DueDate,
		il.PricePrUnit,
		il.Units,
		il.UnitType
	) t
	GROUP BY
	t.PricePrUnit,
	t.UnitType,
	t.Units
)
GO
PRINT N'Refreshing [dbo].[RoundedTimeSpentPrDayPrUser]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.RoundedTimeSpentPrDayPrUser';


GO
PRINT N'Refreshing [dbo].[RoundedTimeSpentPrDayPrUserEx]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.RoundedTimeSpentPrDayPrUserEx';


GO
PRINT N'Refreshing [dbo].[RoundedTimeSpentPrDayPrUserHalfHour]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.RoundedTimeSpentPrDayPrUserHalfHour';


GO
PRINT N'Refreshing [dbo].[TimeEntryView]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.TimeEntryView';


GO
PRINT N'Refreshing [dbo].[ViewInventoryValue]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.ViewInventoryValue';


GO
PRINT N'Refreshing [dbo].[RoundedTimeSpentPrTaskPrDay]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.RoundedTimeSpentPrTaskPrDay';


GO
PRINT N'Altering [dbo].[spGetInvoices]...';


GO

ALTER PROC [dbo].[spGetInvoices]
	@OrderList varchar(1000)
AS
BEGIN
	SET NOCOUNT ON
	SET FMTONLY OFF

	CREATE TABLE #TempList
	(
		CustomerId int
	)

	DECLARE @OrderID varchar(10), @Pos int

	SET @OrderList = LTRIM(RTRIM(@OrderList))+ ','
	SET @Pos = CHARINDEX(',', @OrderList, 1)

	IF REPLACE(@OrderList, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @OrderID = LTRIM(RTRIM(LEFT(@OrderList, @Pos - 1)))
			IF @OrderID <> ''
			BEGIN
				INSERT INTO #TempList (CustomerId) VALUES (CAST(@OrderID AS int)) --Use Appropriate conversion
			END
			SET @OrderList = RIGHT(@OrderList, LEN(@OrderList) - @Pos)
			SET @Pos = CHARINDEX(',', @OrderList, 1)

		END
	END	

	SELECT
		i.ID,
		i.InvoiceID,
		c.CustomerName,
		i.[Guid],
		i.InvoiceDate AS [InvoiceDate],
		DATEDIFF(day,i.StartDate,i.EndDate) AS [InvoicePeriode],
		i.DueDate AS [DueDate],
		cig.Label,
		dbo.FindVAT(i.ID) AS [ExclVAT],
		i.Regarding,
		i.Closed,
		i.CustomerInvoiceGroupId,
		i.StartDate,
		i.EndDate,
		i.Delivered,
		i.DeliveredDate,
		i.attention,
		(SELECT TOP 1 ic.Comment FROM InvoiceComments ic
		where ic.InvoiceID = i.ID
		ORDER BY ic.InvoiceCommentID desc) AS Comment,
		cig.Attention as CigAttention,
		CASE 
			WHEN cig.SendFormat = 0
				THEN c.SendFormat
				ELSE cig.SendFormat
		END AS [SendFormat],
		(SELECT u.Name from Users u
		where u.UserID = c.UserID) AS CustomerManager,
		c.ContactName,
		i.IsCreditNote,
		i.InvoiceLinkId
	FROM InvoiceLines il, #TempList t
		INNER JOIN Customers c
			ON c.CustomerID = t.CustomerId		
		INNER JOIN CustomerInvoiceGroup cig
			ON c.CustomerID = cig.CustomerID
		INNER JOIN Invoices i
			ON i.CustomerInvoiceGroupId = cig.CustomerInvoiceGroupID
	GROUP BY
		c.CustomerName,
		i.InvoiceID,
		i.ID,
		i.[Guid],
		InvoiceDate,	
		cig.Label,
		i.Regarding,
		i.Closed,
		DATEDIFF(day,i.StartDate,i.EndDate),
		DueDate,
		i.CustomerInvoiceGroupId,
		i.StartDate,
		i.EndDate,
		i.Delivered,
		i.DeliveredDate,
		i.attention,
		c.SendFormat,
		cig.SendFormat,
		c.ContactName,
		i.IsCreditNote,
		i.InvoiceLinkId,
		c.UserId,
		cig.Attention
END
GO
PRINT N'Altering [dbo].[spAggregatedTimeEntriesPrTaskPrDayPrInvoice]...';


GO
ALTER PROCEDURE [dbo].[spAggregatedTimeEntriesPrTaskPrDayPrInvoice] 
@InvoiceId INT
AS

	--First, sum all timeentries,grouped by date, and round time to nearest quarter
	SELECT   dbo.ConvertToSmallDate(te.StartTime) AS TaskDate, c.CustomerName AS Customer,c.customerId ,p.ProjectName AS Project, t.TaskName AS Task, 
						  dbo.RoundUpToNextQuarter(SUM(te.BillableTime)) AS TimeSpent,
					i.ID AS InvoiceNumber, i.InvoiceDate,  i.Attention, i.StartDate, i.EndDate, i.DueDate,u.UserID
	INTO #temp
	FROM         dbo.TimeEntries AS te 
				INNER JOIN dbo.Tasks AS t ON t.TaskID = te.TaskID 
				INNER JOIN dbo.Projects AS p ON p.ProjectID = t.ProjectID 
				INNER JOIN dbo.Customers AS c ON c.CustomerID = p.CustomerID
				INNER JOIN dbo.Invoices AS i ON te.InvoiceId = i.ID
				INNER JOIN dbo.Users AS u ON u.UserID = te.UserID
	WHERE i.ID = @InvoiceId
	
	GROUP BY dbo.ConvertToSmallDate(te.StartTime), c.CustomerName, p.ProjectName, t.TaskName,c.customerId ,i.ID, i.InvoiceDate,  i.Attention, i.StartDate, i.EndDate, i.DueDate,u.UserID

	--Then, sum the calculated timeentries, grouped by task
	SELECT     Customer AS CustomerName, Project, Task, SUM(TimeSpent) AS TimeSpent, InvoiceNumber, InvoiceDate,customerId AS CustomerNumber, StreetAddress, ZipCode, City,Country,Attention AS ContactName,StartDate, EndDate,DueDate
	FROM       #temp
	GROUP BY Customer, Project, Task,InvoiceNumber, InvoiceDate,CustomerId, StreetAddress, ZipCode, City,Country,Attention,StartDate, EndDate,DueDate

	DROP TABLE #temp
GO
PRINT N'Altering [dbo].[spGetCustomersInvoiceView]...';


GO

ALTER PROCEDURE [dbo].[spGetCustomersInvoiceView]
	@startDate DATETIME,
	@endDate DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET FMTONLY OFF
	
	SELECT 
		c1.CustomerID,
		c1.CustomerName, 
		c1.internal, 
		
		FirstDateNotInvoiced = (
			SELECT TOP 1 te.StartTime
			FROM TimeEntries te
				INNER JOIN Tasks t ON t.TaskID = te.TaskID
				INNER JOIN Projects p ON p.ProjectID = t.ProjectID
				INNER JOIN Customers c ON c.CustomerID = p.CustomerID
			WHERE c.CustomerID = c1.CustomerID
			and te.Billable = 1
			and (te.DocumentType = 1 or te.DocumentType = 3)
			ORDER BY te.StartTime
			),

		--DistinctPrices = (
		--	SELECT COUNT(distinct te.Price) 
		--	FROM TimeEntries te 
		--		INNER JOIN Tasks t on t.taskid = te.TaskID
		--		INNER JOIN Projects p on p.ProjectID = t.ProjectID
		--		INNER JOIN Customers c on c.CustomerID = p.CustomerID
		--	WHERE
		--		te.Billable = 1 
		--		AND te.StartTime >= @startDate
		--		AND te.StartTime <= @endDate
		--		AND c.CustomerID = c1.CustomerID
		--		AND te.InvoiceId IS NULL
		--		AND(te.DocumentType = 1 OR te.DocumentType = 3)				
		--	GROUP BY c.CustomerID
		--	),

		InventoryValue = (
			SELECT 
				SUM(x.InventoryValue)
			FROM dbo.AggregatedTimeEntriesPrTaskPrDay(c1.CustomerID, @startDate, @endDate, 1) x
			GROUP BY
				x.Customer
			),
			
		OverduePrice = (
			SELECT 
				SUM(x.Price)
			FROM dbo.GetDebitPrice(c1.CustomerID, @startDate, @endDate, 1) x
			),
		
		NonBillableTime =(
			select SUM(te.BillableTime) from TimeEntries te
				INNER JOIN Tasks t on t.taskid = te.TaskID
				INNER JOIN Projects p on p.ProjectID = t.ProjectID
				INNER JOIN Customers c on c.CustomerID = p.CustomerID
			where te.Billable = 0
				AND te.StartTime >= @startDate
				AND te.StartTime <= @endDate
				AND c.CustomerID = c1.CustomerID
			),
		
		Drafts = (
			CASE
				WHEN(
					SELECT SUM(
						CASE
						WHEN i.InvoiceID is null
							THEN 1
							ELSE 0
						END)
					FROM Invoices i
						INNER JOIN CustomerInvoiceGroup cig
							ON cig.CustomerInvoiceGroupID = i.CustomerInvoiceGroupId
					WHERE c1.CustomerID = cig.CustomerID) IS NULL
					THEN 0
				
					ELSE 
						(SELECT SUM(
							CASE
								WHEN i.InvoiceID IS NULL
									THEN 1
									ELSE 0
							END)
						FROM Invoices i
							INNER JOIN CustomerInvoiceGroup cig
								ON cig.CustomerInvoiceGroupID = i.CustomerInvoiceGroupId
						WHERE c1.CustomerID = cig.CustomerID
						)					
				END)
		
	INTO #temp
	FROM Customers c1
		INNER JOIN CustomerInvoiceGroup cig ON c1.CustomerId = cig.CustomerId
	GROUP BY 
		c1.CustomerName,
		c1.CustomerID,
		c1.internal--,
		--i.ID
	ORDER BY 
		c1.CustomerName
			
	SELECT
		t.CustomerID,
		t.CustomerName,
		t.internal,
		--t.DistinctPrices,
		t.OverduePrice,
		t.Drafts,
		MIN(t.FirstDateNotInvoiced) AS FirstDateNotInvoiced,
		t.InventoryValue AS InventoryValue,
		t.NonBillableTime
	FROM #temp t
	GROUP BY
		t.CustomerID,
		t.CustomerName,
		t.internal,
		t.InventoryValue,
		--t.DistinctPrices,
		t.OverduePrice,
		t.Drafts,
		t.NonBillableTime
	ORDER BY 
		t.CustomerName
	
	DROP TABLE #temp

END
GO
PRINT N'Altering [dbo].[spGetSpecificationData_Project]...';


GO

ALTER PROCEDURE [dbo].[spGetSpecificationData_Project]
	@invoiceId int,
	@billable bit,
	@fixedPrice bit
AS
BEGIN
	SET NOCOUNT ON
	SET FMTONLY OFF

	DECLARE @temp TABLE (TimePrUser float, Task nvarchar(200), ProjectID int, Project nvarchar(200), FixedPriceProject bit, FixedPrice float);
	
	DECLARE @isInvoiced BIT = 
		CASE
			WHEN (SELECT TOP 1 i.InvoiceID FROM Invoices i WHERE i.ID = @invoiceId) IS NULL
				THEN 0
				ELSE 1
		END
	
	IF  @isInvoiced = 1
		BEGIN
			INSERT INTO @temp(TimePrUser, Task, ProjectID, Project, FixedPriceProject, FixedPrice)
			SELECT
				dbo.RoundUpToNextQuarter(SUM(t.TimeSpent)) AS TimePrUser,
				t.Task,
				t.ProjectID,
				t.Project,
				t.FixedPriceProject,
				t.FixedPrice
			FROM dbo.AggregatedCreditNotesPrTaskPrDayPrInvoice(@invoiceId, @fixedPrice) t --From CreditNote
			WHERE t.Billable = @billable
			GROUP BY
				t.Task,
				t.ProjectID,
				t.Project,
				t.FixedPriceProject,
				t.FixedPrice			
		END
	ELSE
		BEGIN
			INSERT INTO @temp(TimePrUser, Task, ProjectID, Project, FixedPriceProject, FixedPrice)
			SELECT
				dbo.RoundUpToNextQuarter(SUM(t.TimeSpent)) AS TimePrUser,
				t.Task,
				t.ProjectID,
				t.Project,
				t.FixedPriceProject,
				t.FixedPrice
			FROM dbo.AggregatedTimeEntriesPrTaskPrDayPrInvoice(@invoiceId, @fixedPrice) t --From TimeEntries
			WHERE t.Billable = @billable
			GROUP BY
				t.Task,
				t.ProjectID,
				t.Project,
				t.FixedPriceProject,
				t.FixedPrice
		END		
		
	SELECT 
		t.ProjectID,
		t.Project AS ProjectName,
		SUM(t.TimePrUser) AS [TimeUsed],
		t.FixedPriceProject,
		t.FixedPrice
	FROM @temp t
	GROUP BY
		t.ProjectID,
		t.Project,
		t.FixedPriceProject,
		t.FixedPrice
END
GO
PRINT N'Altering [dbo].[spGetSpecificationData_Task]...';


GO

ALTER PROCEDURE [dbo].[spGetSpecificationData_Task]
(
	@invoiceId int,
	@billable bit,
	@fixedProject bit
)
AS
BEGIN		
	SET NOCOUNT ON
	SET FMTONLY OFF

	DECLARE @temp TABLE (TimePrUser float, Task nvarchar(200), ProjectID int, FixedPriceProject bit, FixedPrice float);
	
	DECLARE @isInvoiced BIT = 
		CASE
			WHEN (SELECT TOP 1 i.InvoiceID FROM Invoices i WHERE i.ID = @invoiceId) IS NULL
				THEN 0
				ELSE 1
		END
	
	IF  @isInvoiced = 1
		BEGIN
			INSERT INTO @temp(TimePrUser, Task, ProjectID, FixedPriceProject, FixedPrice)
			SELECT
				dbo.RoundUpToNextQuarter(SUM(x.TimeSpent)) AS TimePrUser,
				x.Task,
				x.ProjectID,
				x.FixedPriceProject,
				x.FixedPrice
			FROM dbo.AggregatedCreditNotesPrTaskPrDayPrInvoice(@invoiceId, @fixedProject) x
			WHERE x.Billable = @billable
			GROUP BY
				x.Task,
				x.ProjectID	,
				x.FixedPriceProject,
				x.FixedPrice		
		END
	ELSE
		BEGIN
			INSERT INTO @temp(TimePrUser, Task, ProjectID, FixedPriceProject, FixedPrice)
			SELECT
				dbo.RoundUpToNextQuarter(SUM(x.TimeSpent)) AS TimePrUser,
				x.Task,
				x.ProjectID,
				x.FixedPriceProject,
				x.FixedPrice
			FROM dbo.AggregatedTimeEntriesPrTaskPrDayPrInvoice(@invoiceId, @fixedProject) x
			WHERE x.Billable = @billable
			GROUP BY
				x.Task,
				x.ProjectID,
				x.FixedPriceProject,
				x.FixedPrice
		END
		
	SELECT 
		t.Task AS TaskName,
		t.ProjectID,
		SUM(t.TimePrUser) AS [TimeUsed],
		t.FixedPriceProject,
		t.FixedPrice
	FROM @temp t
	GROUP BY
		t.Task,
		t.ProjectID,
		t.FixedPriceProject,
		t.FixedPrice
	
END
GO
PRINT N'Altering [dbo].[spGenerateInvoiceLines]...';


GO

ALTER PROCEDURE [dbo].[spGenerateInvoiceLines]
	@invoiceId int,
	@billable bit,
	@Unit nvarchar(50)
AS
BEGIN
	SET NOCOUNT ON
	SET FMTONLY OFF
	
	DECLARE @temp3 TABLE ( ProjectID int );
	
	SELECT 
		t.Price,
		SUM(t.TimeSpent) AS TimeSpent
	INTO #temp
	FROM dbo.AggregatedTimeEntriesPrTaskPrDayPrInvoice(@invoiceId, 0) t
	WHERE t.Billable = @billable
	GROUP BY
		t.Price
		
	SELECT 
		t.FixedPrice,
		SUM(t.TimeSpent) AS TimeSpent,
		t.Project,
		t.ProjectID
	INTO #temp2
	FROM dbo.AggregatedTimeEntriesPrTaskPrDayPrInvoice(@invoiceId, 1) t
	WHERE 
		t.Billable = @billable
	GROUP BY
		t.FixedPrice,
		t.Project,
		t.ProjectID

	INSERT INTO @temp3 
	SELECT t2.ProjectID
	FROM #temp2 t2
	
	DELETE FROM InvoiceLines
	WHERE 
		(UnitType = 0
		OR UnitType = 2)
		AND InvoiceID = @invoiceId	
	
	--Insert into table
	INSERT INTO InvoiceLines 
		(PricePrUnit, 
		Units, 
		InvoiceID, 
		Unit, 
		UnitType,
		IsExpense, 
		VatPercentage,
		[Text]) 
	SELECT
		t.Price,
		t.TimeSpent,
		@invoiceId,
		@Unit,
		0,
		0,
		(SELECT TOP 1 i.VAT FROM Invoices i WHERE i.ID = @invoiceId), --VAT
		''
	FROM #temp t
	

	INSERT INTO InvoiceLines 
		(PricePrUnit, 
		Units, 
		InvoiceID, 
		Unit, 
		UnitType,
		IsExpense, 
		VatPercentage,
		[Text]) 
	SELECT
		t.FixedPrice,
		t.TimeSpent,
		@invoiceId,
		@Unit,
		2,
		0,
		(SELECT TOP 1 i.VAT FROM Invoices i WHERE i.ID = @invoiceId), --VAT
		t.Project
	FROM #temp2 t
	
	SELECT 
		t3.ProjectID,
		il.ID as InvoiceLineId
	FROM @temp3 t3,
		InvoiceLines il
	WHERE il.InvoiceID = @invoiceId
	
	--SELECT 
	--	t1.*
	--FROM #temp t1
	
	--SELECT *
	--FROM #temp2 t2
	
	DROP TABLE #temp, #temp2
END
GO
PRINT N'Altering [dbo].[spGenerateNewInvoiceDraft]...';


GO

ALTER PROCEDURE [dbo].[spGenerateNewInvoiceDraft]
@customerInvoiceGroupId int,
@createdBy int,
@VAT float,
@startDate DATETIME,
@endDate DATETIME
AS
BEGIN

	DECLARE @Duedate DATETIME;
	DECLARE @invoiceDate DATETIME;
	DECLARE @today DATETIME;
	
	SET @today = GETDATE();
	
	IF @endDate > @today
	BEGIN
		SET @invoiceDate = @today
	END
	ELSE
	BEGIN
		SET @invoiceDate = @endDate
	END
	
	INSERT INTO Invoices (
		CreateDate, 
		InvoiceDate, 
		CreatedBy, 
		VAT, 
		StartDate, 
		EndDate, 
		Closed, 
		DueDate, 
		CustomerInvoiceGroupId,
		Guid,
		Attention)
	VALUES 
		(
		GETDATE(),
		@invoiceDate, 
		@createdBy,
		@VAT,
		@startDate,
		@endDate,
		0, --Not closed
		DATEADD(D, 14, @invoiceDate), 
		@customerInvoiceGroupId,
		NEWID(),
		(SELECT cig.Attention FROM CustomerInvoiceGroup cig
			WHERE cig.CustomerInvoiceGroupID = @customerInvoiceGroupId));
		
	SELECT TOP 1 *
	FROM Invoices i	
	ORDER BY i.ID DESC
	
END
SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[spUpdateTimeEntriesHourPrice]...';


GO

CREATE PROCEDURE [dbo].[spUpdateTimeEntriesHourPrice]
(
	@projectId int,
	@newPrice float,
	@invoicelineId int
)		
AS
BEGIN
	UPDATE te
	SET te.Price = @newPrice
	FROM TimeEntries te
		INNER JOIN Tasks t ON te.TaskID = t.TaskID
		INNER JOIN Projects p ON t.ProjectID = p.ProjectID
		INNER JOIN Invoices i ON i.ID = te.InvoiceId
		INNER JOIN InvoiceLines il ON il.InvoiceID = i.ID
	WHERE 
		p.ProjectID = @projectId
		AND il.ID = @invoicelineId
END
GO
PRINT N'Refreshing [dbo].[spRoundedTimeSpentPrTaskPrDayPrUser]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.spRoundedTimeSpentPrTaskPrDayPrUser';


GO
PRINT N'Refreshing [dbo].[spRoundedTimeSpentPrTaskPrDayPrUserPrPrice]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.spRoundedTimeSpentPrTaskPrDayPrUserPrPrice';


GO
PRINT N'Refreshing [dbo].[spAggregatedTimeEntriesPrTaskPrDay]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.spAggregatedTimeEntriesPrTaskPrDay';


GO
PRINT N'Refreshing [dbo].[spGetGeneratedInvoiceLines]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.spGetGeneratedInvoiceLines';


GO
PRINT N'Refreshing [dbo].[spGetCustomerInvoiceView]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.spGetCustomerInvoiceView';


GO
PRINT N'Refreshing [dbo].[spDeleteInvoice]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.spDeleteInvoice';


GO
PRINT N'Refreshing [dbo].[spFindTimeEntiresForInvoice]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.spFindTimeEntiresForInvoice';


GO
PRINT N'Refreshing [dbo].[spSaveProject]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.spSaveProject';


GO
PRINT N'Refreshing [dbo].[UpdateTimeEntriesInvoiceId]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.UpdateTimeEntriesInvoiceId';


GO
PRINT N'Refreshing [dbo].[UpdateTimeEntriesInvoiceIdToNull]...';


GO
EXECUTE sp_refreshsqlmodule N'dbo.UpdateTimeEntriesInvoiceIdToNull';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.InvoiceComments'), OBJECT_ID(N'dbo.Customers'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: {0} [{1}].[{2}]' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
