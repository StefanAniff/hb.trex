//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using Trex.ServiceContracts;

namespace Trex.Server.DataAccess
{
    public partial class TrexEntities : ObjectContext
    {
        public const string ConnectionString = "name=TrexEntities";
        public const string ContainerName = "TrexEntities";
    
        #region Constructors
    
        public TrexEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public TrexEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public TrexEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<BugtrackerIntegrationProject> BugtrackerIntegrationProjects
        {
            get { return _bugtrackerIntegrationProjects  ?? (_bugtrackerIntegrationProjects = CreateObjectSet<BugtrackerIntegrationProject>("BugtrackerIntegrationProjects")); }
        }
        private ObjectSet<BugtrackerIntegrationProject> _bugtrackerIntegrationProjects;
    
        public ObjectSet<BugtrackerIntegrationTask> BugtrackerIntegrationTasks
        {
            get { return _bugtrackerIntegrationTasks  ?? (_bugtrackerIntegrationTasks = CreateObjectSet<BugtrackerIntegrationTask>("BugtrackerIntegrationTasks")); }
        }
        private ObjectSet<BugtrackerIntegrationTask> _bugtrackerIntegrationTasks;
    
        public ObjectSet<BugtrackerIntegrationUser> BugtrackerIntegrationUsers
        {
            get { return _bugtrackerIntegrationUsers  ?? (_bugtrackerIntegrationUsers = CreateObjectSet<BugtrackerIntegrationUser>("BugtrackerIntegrationUsers")); }
        }
        private ObjectSet<BugtrackerIntegrationUser> _bugtrackerIntegrationUsers;
    
        public ObjectSet<BugtrackerTaskImport> BugtrackerTaskImports
        {
            get { return _bugtrackerTaskImports  ?? (_bugtrackerTaskImports = CreateObjectSet<BugtrackerTaskImport>("BugtrackerTaskImports")); }
        }
        private ObjectSet<BugtrackerTaskImport> _bugtrackerTaskImports;
    
        public ObjectSet<BugtrackerTimeEntryExport> BugtrackerTimeEntryExports
        {
            get { return _bugtrackerTimeEntryExports  ?? (_bugtrackerTimeEntryExports = CreateObjectSet<BugtrackerTimeEntryExport>("BugtrackerTimeEntryExports")); }
        }
        private ObjectSet<BugtrackerTimeEntryExport> _bugtrackerTimeEntryExports;
    
        public ObjectSet<CustomerInvoiceGroup> CustomerInvoiceGroups
        {
            get { return _customerInvoiceGroups  ?? (_customerInvoiceGroups = CreateObjectSet<CustomerInvoiceGroup>("CustomerInvoiceGroups")); }
        }
        private ObjectSet<CustomerInvoiceGroup> _customerInvoiceGroups;
    
        public ObjectSet<Customer> Customers
        {
            get { return _customers  ?? (_customers = CreateObjectSet<Customer>("Customers")); }
        }
        private ObjectSet<Customer> _customers;
    
        public ObjectSet<InvoiceFile> InvoiceFiles
        {
            get { return _invoiceFiles  ?? (_invoiceFiles = CreateObjectSet<InvoiceFile>("InvoiceFiles")); }
        }
        private ObjectSet<InvoiceFile> _invoiceFiles;
    
        public ObjectSet<InvoiceLine> InvoiceLines
        {
            get { return _invoiceLines  ?? (_invoiceLines = CreateObjectSet<InvoiceLine>("InvoiceLines")); }
        }
        private ObjectSet<InvoiceLine> _invoiceLines;
    
        public ObjectSet<Invoice> Invoices
        {
            get { return _invoices  ?? (_invoices = CreateObjectSet<Invoice>("Invoices")); }
        }
        private ObjectSet<Invoice> _invoices;
    
        public ObjectSet<InvoiceTemplate> InvoiceTemplates
        {
            get { return _invoiceTemplates  ?? (_invoiceTemplates = CreateObjectSet<InvoiceTemplate>("InvoiceTemplates")); }
        }
        private ObjectSet<InvoiceTemplate> _invoiceTemplates;
    
        public ObjectSet<PermissionsInRole> PermissionsInRoles
        {
            get { return _permissionsInRoles  ?? (_permissionsInRoles = CreateObjectSet<PermissionsInRole>("PermissionsInRoles")); }
        }
        private ObjectSet<PermissionsInRole> _permissionsInRoles;
    
        public ObjectSet<Project> Projects
        {
            get { return _projects  ?? (_projects = CreateObjectSet<Project>("Projects")); }
        }
        private ObjectSet<Project> _projects;
    
        public ObjectSet<Role> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Role>("Roles")); }
        }
        private ObjectSet<Role> _roles;
    
        public ObjectSet<Tag> Tags
        {
            get { return _tags  ?? (_tags = CreateObjectSet<Tag>("Tags")); }
        }
        private ObjectSet<Tag> _tags;
    
        public ObjectSet<Task> Tasks
        {
            get { return _tasks  ?? (_tasks = CreateObjectSet<Task>("Tasks")); }
        }
        private ObjectSet<Task> _tasks;
    
        public ObjectSet<TimeEntry> TimeEntries
        {
            get { return _timeEntries  ?? (_timeEntries = CreateObjectSet<TimeEntry>("TimeEntries")); }
        }
        private ObjectSet<TimeEntry> _timeEntries;
    
        public ObjectSet<TimeEntryType> TimeEntryTypes
        {
            get { return _timeEntryTypes  ?? (_timeEntryTypes = CreateObjectSet<TimeEntryType>("TimeEntryTypes")); }
        }
        private ObjectSet<TimeEntryType> _timeEntryTypes;
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public ObjectSet<UsersCustomer> UsersCustomers
        {
            get { return _usersCustomers  ?? (_usersCustomers = CreateObjectSet<UsersCustomer>("UsersCustomers")); }
        }
        private ObjectSet<UsersCustomer> _usersCustomers;
    
        public ObjectSet<Version> Versions
        {
            get { return _versions  ?? (_versions = CreateObjectSet<Version>("Versions")); }
        }
        private ObjectSet<Version> _versions;
    
        public ObjectSet<RoundedTimeSpentPrDayPrUser> RoundedTimeSpentPrDayPrUsers
        {
            get { return _roundedTimeSpentPrDayPrUsers  ?? (_roundedTimeSpentPrDayPrUsers = CreateObjectSet<RoundedTimeSpentPrDayPrUser>("RoundedTimeSpentPrDayPrUsers")); }
        }
        private ObjectSet<RoundedTimeSpentPrDayPrUser> _roundedTimeSpentPrDayPrUsers;
    
        public ObjectSet<RoundedTimeSpentPrDayPrUserEx> RoundedTimeSpentPrDayPrUserExes
        {
            get { return _roundedTimeSpentPrDayPrUserExes  ?? (_roundedTimeSpentPrDayPrUserExes = CreateObjectSet<RoundedTimeSpentPrDayPrUserEx>("RoundedTimeSpentPrDayPrUserExes")); }
        }
        private ObjectSet<RoundedTimeSpentPrDayPrUserEx> _roundedTimeSpentPrDayPrUserExes;
    
        public ObjectSet<RoundedTimeSpentPrDayPrUserHalfHour> RoundedTimeSpentPrDayPrUserHalfHours
        {
            get { return _roundedTimeSpentPrDayPrUserHalfHours  ?? (_roundedTimeSpentPrDayPrUserHalfHours = CreateObjectSet<RoundedTimeSpentPrDayPrUserHalfHour>("RoundedTimeSpentPrDayPrUserHalfHours")); }
        }
        private ObjectSet<RoundedTimeSpentPrDayPrUserHalfHour> _roundedTimeSpentPrDayPrUserHalfHours;
    
        public ObjectSet<RoundedTimeSpentPrTaskPrDay> RoundedTimeSpentPrTaskPrDays
        {
            get { return _roundedTimeSpentPrTaskPrDays  ?? (_roundedTimeSpentPrTaskPrDays = CreateObjectSet<RoundedTimeSpentPrTaskPrDay>("RoundedTimeSpentPrTaskPrDays")); }
        }
        private ObjectSet<RoundedTimeSpentPrTaskPrDay> _roundedTimeSpentPrTaskPrDays;
    
        public ObjectSet<TimeEntryView> TimeEntryViews
        {
            get { return _timeEntryViews  ?? (_timeEntryViews = CreateObjectSet<TimeEntryView>("TimeEntryViews")); }
        }
        private ObjectSet<TimeEntryView> _timeEntryViews;
    
        public ObjectSet<UserTimeEntryStat> UserTimeEntryStats
        {
            get { return _userTimeEntryStats  ?? (_userTimeEntryStats = CreateObjectSet<UserTimeEntryStat>("UserTimeEntryStats")); }
        }
        private ObjectSet<UserTimeEntryStat> _userTimeEntryStats;
    
        public ObjectSet<ViewInventoryValue> ViewInventoryValues
        {
            get { return _viewInventoryValues  ?? (_viewInventoryValues = CreateObjectSet<ViewInventoryValue>("ViewInventoryValues")); }
        }
        private ObjectSet<ViewInventoryValue> _viewInventoryValues;
    
        public ObjectSet<InvoiceTemplateFiles> InvoiceTemplateFiles
        {
            get { return _invoiceTemplateFiles  ?? (_invoiceTemplateFiles = CreateObjectSet<InvoiceTemplateFiles>("InvoiceTemplateFiles")); }
        }
        private ObjectSet<InvoiceTemplateFiles> _invoiceTemplateFiles;
    
        public ObjectSet<CreditNote> CreditNote
        {
            get { return _creditNote  ?? (_creditNote = CreateObjectSet<CreditNote>("CreditNote")); }
        }
        private ObjectSet<CreditNote> _creditNote;
    
        public ObjectSet<DocumentType> DocumentType
        {
            get { return _documentType  ?? (_documentType = CreateObjectSet<DocumentType>("DocumentType")); }
        }
        private ObjectSet<DocumentType> _documentType;
    
        public ObjectSet<InvoiceComment> InvoiceComments
        {
            get { return _invoiceComments  ?? (_invoiceComments = CreateObjectSet<InvoiceComment>("InvoiceComments")); }
        }
        private ObjectSet<InvoiceComment> _invoiceComments;

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="orderList">No Metadata Documentation available.</param>
        public virtual ObjectResult<InvoiceListItemView> InvoiceListItemView(string orderList)
        {
    
            ObjectParameter orderListParameter;
    
            if (orderList != null)
            {
                orderListParameter = new ObjectParameter("OrderList", orderList);
            }
            else
            {
                orderListParameter = new ObjectParameter("OrderList", typeof(string));
            }
            return base.ExecuteFunction<InvoiceListItemView>("InvoiceListItemView", orderListParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        public virtual ObjectResult<CustomersInvoiceView> CustomersInvoiceView(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
    
            ObjectParameter startDateParameter;
    
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("startDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("startDate", typeof(System.DateTime));
            }
    
            ObjectParameter endDateParameter;
    
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("endDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("endDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<CustomersInvoiceView>("CustomersInvoiceView", startDateParameter, endDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="roleName">No Metadata Documentation available.</param>
        /// <param name="clientApplicationID">No Metadata Documentation available.</param>
        public virtual ObjectResult<UserPermission> GetUserPermission(string roleName, Nullable<int> clientApplicationID)
        {
    
            ObjectParameter roleNameParameter;
    
            if (roleName != null)
            {
                roleNameParameter = new ObjectParameter("RoleName", roleName);
            }
            else
            {
                roleNameParameter = new ObjectParameter("RoleName", typeof(string));
            }
    
            ObjectParameter clientApplicationIDParameter;
    
            if (clientApplicationID.HasValue)
            {
                clientApplicationIDParameter = new ObjectParameter("ClientApplicationID", clientApplicationID);
            }
            else
            {
                clientApplicationIDParameter = new ObjectParameter("ClientApplicationID", typeof(int));
            }
            return base.ExecuteFunction<UserPermission>("GetUserPermission", roleNameParameter, clientApplicationIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="invoiceId">No Metadata Documentation available.</param>
        /// <param name="billable">No Metadata Documentation available.</param>
        /// <param name="fixedProject">No Metadata Documentation available.</param>
        public virtual ObjectResult<GetSpecificationData_Tasks_Result> GetSpecificationData_Tasks(Nullable<int> invoiceId, Nullable<bool> billable, Nullable<bool> fixedProject)
        {
    
            ObjectParameter invoiceIdParameter;
    
            if (invoiceId.HasValue)
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", invoiceId);
            }
            else
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", typeof(int));
            }
    
            ObjectParameter billableParameter;
    
            if (billable.HasValue)
            {
                billableParameter = new ObjectParameter("billable", billable);
            }
            else
            {
                billableParameter = new ObjectParameter("billable", typeof(bool));
            }
    
            ObjectParameter fixedProjectParameter;
    
            if (fixedProject.HasValue)
            {
                fixedProjectParameter = new ObjectParameter("fixedProject", fixedProject);
            }
            else
            {
                fixedProjectParameter = new ObjectParameter("fixedProject", typeof(bool));
            }
            return base.ExecuteFunction<GetSpecificationData_Tasks_Result>("GetSpecificationData_Tasks", invoiceIdParameter, billableParameter, fixedProjectParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="customerInvoiceGroupId">No Metadata Documentation available.</param>
        /// <param name="startdate">No Metadata Documentation available.</param>
        /// <param name="enddate">No Metadata Documentation available.</param>
        public virtual ObjectResult<FindTimeEntriesForInvoice_Result> FindTimeEntriesForInvoice(Nullable<int> customerInvoiceGroupId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
    
            ObjectParameter customerInvoiceGroupIdParameter;
    
            if (customerInvoiceGroupId.HasValue)
            {
                customerInvoiceGroupIdParameter = new ObjectParameter("customerInvoiceGroupId", customerInvoiceGroupId);
            }
            else
            {
                customerInvoiceGroupIdParameter = new ObjectParameter("customerInvoiceGroupId", typeof(int));
            }
    
            ObjectParameter startdateParameter;
    
            if (startdate.HasValue)
            {
                startdateParameter = new ObjectParameter("startdate", startdate);
            }
            else
            {
                startdateParameter = new ObjectParameter("startdate", typeof(System.DateTime));
            }
    
            ObjectParameter enddateParameter;
    
            if (enddate.HasValue)
            {
                enddateParameter = new ObjectParameter("enddate", enddate);
            }
            else
            {
                enddateParameter = new ObjectParameter("enddate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<FindTimeEntriesForInvoice_Result>("FindTimeEntriesForInvoice", customerInvoiceGroupIdParameter, startdateParameter, enddateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="customerInvoiceGroupId">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="vAT">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        public virtual ObjectResult<GenerateNewInvoiceDraft> GenerateNewInvoiceDraft(Nullable<int> customerInvoiceGroupId, Nullable<int> createdBy, Nullable<double> vAT, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
    
            ObjectParameter customerInvoiceGroupIdParameter;
    
            if (customerInvoiceGroupId.HasValue)
            {
                customerInvoiceGroupIdParameter = new ObjectParameter("customerInvoiceGroupId", customerInvoiceGroupId);
            }
            else
            {
                customerInvoiceGroupIdParameter = new ObjectParameter("customerInvoiceGroupId", typeof(int));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("createdBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("createdBy", typeof(int));
            }
    
            ObjectParameter vATParameter;
    
            if (vAT.HasValue)
            {
                vATParameter = new ObjectParameter("VAT", vAT);
            }
            else
            {
                vATParameter = new ObjectParameter("VAT", typeof(double));
            }
    
            ObjectParameter startDateParameter;
    
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("startDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("startDate", typeof(System.DateTime));
            }
    
            ObjectParameter endDateParameter;
    
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("endDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("endDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<GenerateNewInvoiceDraft>("GenerateNewInvoiceDraft", customerInvoiceGroupIdParameter, createdByParameter, vATParameter, startDateParameter, endDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="customerInvoiceGroupId">No Metadata Documentation available.</param>
        /// <param name="startdate">No Metadata Documentation available.</param>
        /// <param name="enddate">No Metadata Documentation available.</param>
        /// <param name="invoiceId">No Metadata Documentation available.</param>
        public virtual int UpdateTimeEntriesInvoiceId(Nullable<int> customerInvoiceGroupId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> invoiceId)
        {
    
            ObjectParameter customerInvoiceGroupIdParameter;
    
            if (customerInvoiceGroupId.HasValue)
            {
                customerInvoiceGroupIdParameter = new ObjectParameter("customerInvoiceGroupId", customerInvoiceGroupId);
            }
            else
            {
                customerInvoiceGroupIdParameter = new ObjectParameter("customerInvoiceGroupId", typeof(int));
            }
    
            ObjectParameter startdateParameter;
    
            if (startdate.HasValue)
            {
                startdateParameter = new ObjectParameter("startdate", startdate);
            }
            else
            {
                startdateParameter = new ObjectParameter("startdate", typeof(System.DateTime));
            }
    
            ObjectParameter enddateParameter;
    
            if (enddate.HasValue)
            {
                enddateParameter = new ObjectParameter("enddate", enddate);
            }
            else
            {
                enddateParameter = new ObjectParameter("enddate", typeof(System.DateTime));
            }
    
            ObjectParameter invoiceIdParameter;
    
            if (invoiceId.HasValue)
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", invoiceId);
            }
            else
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", typeof(int));
            }
            return base.ExecuteFunction("UpdateTimeEntriesInvoiceId", customerInvoiceGroupIdParameter, startdateParameter, enddateParameter, invoiceIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="invoiceId">No Metadata Documentation available.</param>
        /// <param name="billable">No Metadata Documentation available.</param>
        /// <param name="unit">No Metadata Documentation available.</param>
        public virtual ObjectResult<FixedProjects> GenerateInvoiceLines(Nullable<int> invoiceId, Nullable<bool> billable, string unit)
        {
    
            ObjectParameter invoiceIdParameter;
    
            if (invoiceId.HasValue)
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", invoiceId);
            }
            else
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", typeof(int));
            }
    
            ObjectParameter billableParameter;
    
            if (billable.HasValue)
            {
                billableParameter = new ObjectParameter("billable", billable);
            }
            else
            {
                billableParameter = new ObjectParameter("billable", typeof(bool));
            }
    
            ObjectParameter unitParameter;
    
            if (unit != null)
            {
                unitParameter = new ObjectParameter("Unit", unit);
            }
            else
            {
                unitParameter = new ObjectParameter("Unit", typeof(string));
            }
            return base.ExecuteFunction<FixedProjects>("GenerateInvoiceLines", invoiceIdParameter, billableParameter, unitParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="customerInvoiceGroupId">No Metadata Documentation available.</param>
        /// <param name="startdate">No Metadata Documentation available.</param>
        /// <param name="enddate">No Metadata Documentation available.</param>
        /// <param name="invoiceId">No Metadata Documentation available.</param>
        public virtual int UpdateTimeEntriesInvoiceIdToNull(Nullable<int> customerInvoiceGroupId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> invoiceId)
        {
    
            ObjectParameter customerInvoiceGroupIdParameter;
    
            if (customerInvoiceGroupId.HasValue)
            {
                customerInvoiceGroupIdParameter = new ObjectParameter("customerInvoiceGroupId", customerInvoiceGroupId);
            }
            else
            {
                customerInvoiceGroupIdParameter = new ObjectParameter("customerInvoiceGroupId", typeof(int));
            }
    
            ObjectParameter startdateParameter;
    
            if (startdate.HasValue)
            {
                startdateParameter = new ObjectParameter("startdate", startdate);
            }
            else
            {
                startdateParameter = new ObjectParameter("startdate", typeof(System.DateTime));
            }
    
            ObjectParameter enddateParameter;
    
            if (enddate.HasValue)
            {
                enddateParameter = new ObjectParameter("enddate", enddate);
            }
            else
            {
                enddateParameter = new ObjectParameter("enddate", typeof(System.DateTime));
            }
    
            ObjectParameter invoiceIdParameter;
    
            if (invoiceId.HasValue)
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", invoiceId);
            }
            else
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", typeof(int));
            }
            return base.ExecuteFunction("UpdateTimeEntriesInvoiceIdToNull", customerInvoiceGroupIdParameter, startdateParameter, enddateParameter, invoiceIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="originalInvoiceId">No Metadata Documentation available.</param>
        /// <param name="newInvoiceId">No Metadata Documentation available.</param>
        public virtual int GenerateCreditNoteLines(Nullable<int> originalInvoiceId, Nullable<int> newInvoiceId)
        {
    
            ObjectParameter originalInvoiceIdParameter;
    
            if (originalInvoiceId.HasValue)
            {
                originalInvoiceIdParameter = new ObjectParameter("OriginalInvoiceId", originalInvoiceId);
            }
            else
            {
                originalInvoiceIdParameter = new ObjectParameter("OriginalInvoiceId", typeof(int));
            }
    
            ObjectParameter newInvoiceIdParameter;
    
            if (newInvoiceId.HasValue)
            {
                newInvoiceIdParameter = new ObjectParameter("NewInvoiceId", newInvoiceId);
            }
            else
            {
                newInvoiceIdParameter = new ObjectParameter("NewInvoiceId", typeof(int));
            }
            return base.ExecuteFunction("GenerateCreditNoteLines", originalInvoiceIdParameter, newInvoiceIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="invoiceId">No Metadata Documentation available.</param>
        public virtual int CopyTimeEntriesToCreditNote(Nullable<int> invoiceId)
        {
    
            ObjectParameter invoiceIdParameter;
    
            if (invoiceId.HasValue)
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", invoiceId);
            }
            else
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", typeof(int));
            }
            return base.ExecuteFunction("CopyTimeEntriesToCreditNote", invoiceIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="invoiceId">No Metadata Documentation available.</param>
        public virtual int SetDocumentType(Nullable<int> invoiceId)
        {
    
            ObjectParameter invoiceIdParameter;
    
            if (invoiceId.HasValue)
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", invoiceId);
            }
            else
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", typeof(int));
            }
            return base.ExecuteFunction("SetDocumentType", invoiceIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="cigId">No Metadata Documentation available.</param>
        /// <param name="changedate">No Metadata Documentation available.</param>
        public virtual int SaveProject(Nullable<int> projectId, string name, Nullable<int> cigId, Nullable<System.DateTime> changedate)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter nameParameter;
    
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(string));
            }
    
            ObjectParameter cigIdParameter;
    
            if (cigId.HasValue)
            {
                cigIdParameter = new ObjectParameter("cigId", cigId);
            }
            else
            {
                cigIdParameter = new ObjectParameter("cigId", typeof(int));
            }
    
            ObjectParameter changedateParameter;
    
            if (changedate.HasValue)
            {
                changedateParameter = new ObjectParameter("changedate", changedate);
            }
            else
            {
                changedateParameter = new ObjectParameter("changedate", typeof(System.DateTime));
            }
            return base.ExecuteFunction("SaveProject", projectIdParameter, nameParameter, cigIdParameter, changedateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="invoiceId">No Metadata Documentation available.</param>
        public virtual int DeleteInvoice(Nullable<int> invoiceId)
        {
    
            ObjectParameter invoiceIdParameter;
    
            if (invoiceId.HasValue)
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", invoiceId);
            }
            else
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", typeof(int));
            }
            return base.ExecuteFunction("DeleteInvoice", invoiceIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="oldInvoiceId">No Metadata Documentation available.</param>
        public virtual int ReplicateCreditNoteLines(Nullable<int> oldInvoiceId)
        {
    
            ObjectParameter oldInvoiceIdParameter;
    
            if (oldInvoiceId.HasValue)
            {
                oldInvoiceIdParameter = new ObjectParameter("oldInvoiceId", oldInvoiceId);
            }
            else
            {
                oldInvoiceIdParameter = new ObjectParameter("oldInvoiceId", typeof(int));
            }
            return base.ExecuteFunction("ReplicateCreditNoteLines", oldInvoiceIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="newPrice">No Metadata Documentation available.</param>
        /// <param name="invoicelineId">No Metadata Documentation available.</param>
        public virtual int UpdateTimeEntriesHourPrice(Nullable<int> projectId, Nullable<double> newPrice, Nullable<int> invoicelineId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("projectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("projectId", typeof(int));
            }
    
            ObjectParameter newPriceParameter;
    
            if (newPrice.HasValue)
            {
                newPriceParameter = new ObjectParameter("newPrice", newPrice);
            }
            else
            {
                newPriceParameter = new ObjectParameter("newPrice", typeof(double));
            }
    
            ObjectParameter invoicelineIdParameter;
    
            if (invoicelineId.HasValue)
            {
                invoicelineIdParameter = new ObjectParameter("invoicelineId", invoicelineId);
            }
            else
            {
                invoicelineIdParameter = new ObjectParameter("invoicelineId", typeof(int));
            }
            return base.ExecuteFunction("UpdateTimeEntriesHourPrice", projectIdParameter, newPriceParameter, invoicelineIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="invoiceId">No Metadata Documentation available.</param>
        /// <param name="billable">No Metadata Documentation available.</param>
        /// <param name="fixedPrice">No Metadata Documentation available.</param>
        public virtual ObjectResult<GetSpecificationData_Project_Result> GetSpecificationData_Project(Nullable<int> invoiceId, Nullable<bool> billable, Nullable<bool> fixedPrice)
        {
    
            ObjectParameter invoiceIdParameter;
    
            if (invoiceId.HasValue)
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", invoiceId);
            }
            else
            {
                invoiceIdParameter = new ObjectParameter("invoiceId", typeof(int));
            }
    
            ObjectParameter billableParameter;
    
            if (billable.HasValue)
            {
                billableParameter = new ObjectParameter("billable", billable);
            }
            else
            {
                billableParameter = new ObjectParameter("billable", typeof(bool));
            }
    
            ObjectParameter fixedPriceParameter;
    
            if (fixedPrice.HasValue)
            {
                fixedPriceParameter = new ObjectParameter("fixedPrice", fixedPrice);
            }
            else
            {
                fixedPriceParameter = new ObjectParameter("fixedPrice", typeof(bool));
            }
            return base.ExecuteFunction<GetSpecificationData_Project_Result>("GetSpecificationData_Project", invoiceIdParameter, billableParameter, fixedPriceParameter);
        }

        #endregion

    }
}
